base silent = base_element*
comments Braced # # = [.*] as comment
NAME = [[a-zA-Z_][a-zA-Z0-9_]*]
OPERATOR
	"??"
	"::"
	"!!"
	"%%"
	[[^a-zA-Z0-9_\s(){}[];\"\'`,\\:][^a-zA-Z0-9_\s(){}[];\"\'`,\\]] as exact
	[[^a-zA-Z0-9_\s(){}[];?!\"\'`,\\:%]] as exact
	"instanceof " as exact
NUMBER = [[-]?(\d*[.])?\d+[f]?(x[A-F]+)?\s*]

quote                  Braced " " , Ignore None = [.*]
class_body             Braced { } , silent = class_element*
method_body         @2 Braced { } , silent = body_element*
method_arguments       Braced ( )        = ( method_argument ( "," method_argument )* )?
template_parameters @2 Braced < >        = all_type_name as template_parameter ( "," all_type_name as template_parameter )*
array_parameters       Braced [ ]        = ( method_argument ( "," method_argument )* )?
statement_as_quote     = "''" body_statement "''"
statement_as_string    = "'" body_statement "'"
statement_as_method    Braced ` `        = body_statement
statement_as_braced    Braced ( )        = body_statement
as_statement           Braced | |        = (body_element+ | body_statement)
cast_statement         Braced ( )        = type_var


statement_as_char                        = "char\\" [.] as value

class_file_name = [[^\n]+]

class_names global list with NAME
	"void", "Void"
	"boolean", "Boolean"
	"int", "Integer"
	"long", "Long"
	"float", "Float"
	"double", "Double"
	"byte", "Byte"
	"char", "Character"
	"String"
	"Object", "System", "Math", "StringBuilder"
	"Thread", "Runnable"
	"Iterator", "Iterable"
	"Serializable", "Random"
	"Set", "HashSet", "TreeSet"
	"List", "ArrayList", "LinkedList"
	"Map", "HashMap"
	"Stack", "Deque"
	"File", "FileReader", "FileWriter", "BufferedReader", "BufferedWriter"
	"MainFlow", "Parser", "Token", "Result", "Tokens"
	"Pass", "Fail"
class_variable_names list with NAME
variable_names list with NAME
	"super","this","null","true","false","continue","break"

base_element silent
	comments
	import_imports
	import_clws
	class_declaration
	method_declaration
	variable_declaration

import_clws Imports class_file_name ".clws" = "import " class_file_name "" 
	base_element*
import_imports Imports class_file_name ".imports" = "imports " class_file_name "" 
	anonymous_classes*

packageName = name_var | NAME
anonymous_classes
	"<" packageName ("." packageName)* anonymous_class*
anonymous_class
	anonymous_class_name ( ":" anonymous_class_name as anonymous_class ("|" anonymous_class_name as anonymous_class)*)?
anonymous_class_name silent
	NAME as className in class_names ("." NAME as className in class_names)*

inner = (">"|"inner ")
weak = "~"
class_declaration
	inner? ("@"|"static ") as static? ("class "|"interface " | "enum ") as objectType (packageName "." )* (name_var|NAME ) as className in class_names "?" as weak?  ( "<" ("?"|NAME) as templateTypeName in class_variable_names ("," ("?"|NAME) as templateTypeName in class_variable_names)* ">" )? (type_var as parentName)? ("<" type_var as interfaceName ("," type_var as interfaceName)*)? class_body
class_element silent
	comments
	class_declaration
	method_declaration
	variable_declaration
body_element
	comments
	( "return" method_argument? ";" ) as body_return
	( "throw" body_statement ";" ) as body_throw
	body_access_token
	variable_declaration
	variable_assignment ";"
	body_add_to_class
	body_conditional
	body_statement ";"
body_conditional
	("if "|"else" "if"|"while"|"synchronized"|"switch"|"case") as conditional body_statement ( method_body as as_body | statement_as_method )
	"else" as conditional ( method_body as as_body | statement_as_method )
	"for "  as conditional (variable_name_definition ("?" as weak | "!" as isFinal)?) as variable_declaration (":"|"<"|">"|">="|"<=") as OPERATOR body_statement ( method_body as as_body | statement_as_method )
	"try"  as conditional ( method_body as as_body | statement_as_method )
	"print" as PRINT? "catch" as conditional ("*" | NAME) as exception ( "|" ("*" | NAME) as exception )* ( method_body as as_body | statement_as_method )
body_statement
	( OPERATOR?  body_call ) ( OPERATOR  body_call )*
body_call
	"(" all_type_name as cast_statement ")" (((name_atom as name_var method_arguments? |NAME method_arguments)array_parameters*) ) as group ( (".") as separator ( name_var | NAME ) method_arguments? array_parameters*) as group*
	statement_as_braced as as_braced
	as_statement
	(("new " as NEW all_type_name method_arguments array_parameters*)|name_var method_arguments? array_parameters*|"%" non_class_name as all_type_name method_arguments?|type_var as all_type_name|NAME method_arguments array_parameters*) as group ( (".") as separator ( name_var | NAME ) method_arguments? array_parameters*) as group*
body_add_to_class
	type_var ("->*" ( name_var | NAME)? ) as accessMethod? "+=" as add ( class_declaration | method_declaration | variable_declaration | method_body as body | as_statement as body )
body_access_token
	(name_atom ( "->" as get NAME ) as access*) as tokenAccess ":" NAME as variableName in variable_names ( ":" NAME as tokenName method_body) as tokenInstance+


method_parameters
	"(" (variable_name_definition "?" as weak?) as parameter?  ( "," (variable_name_definition "?" as weak?) as parameter? )* ")"
method_argument
	( NAME as variableName in variable_names? ("," NAME as variableName in variable_names)* "=>" (body_call | method_body as body) ) as lambda
	class_declaration
	method_declaration
	variable_declaration
	as_statement
	body_statement
	method_body as body_entries
method_declaration
	inner? ("@"|"static") as static? all_type_name "[]" as ARRAY_TYPE* (name_var | NAME) as methodName? ( method_parameters as inline | statement_as_method as variableParameters ) ( "{?}" as weak | method_body as body )
variable_declaration
	inner? ("@"|"static") as static? variable_name_definition ( "=" method_argument)? ("!" as isFinal|"?" as weak|";")
variable_assignment
	name_var "=" method_argument

variable_name_definition silent
	class_variable_name_definition
	non_class_variable_name_definition

non_class_variable_name_definition silent
	all_type_name as typeName "..." as INLINE_LIST? "[]" as ARRAY_TYPE* (name_var | NAME ) as variableName in variable_names
class_variable_name_definition silent
	"Class " as typeName (name_var | NAME ) as variableName in class_variable_names  

all_type_name
	"%" non_class_name
	type_var
non_class_name
	"Class" as OutputClass | "Method" as OutputMethod | "Variable" as OutputVariable | "Context" as OutputContext
	("ConditionalHeader"|"Header") as OutputConditionalHeader
	("Concatenation" | "Concat" ) as OutputConcatenation
	"Quote" as OutputQuote  | "Cast" as OutputCast | "String" as OutputString
	"Statement" as OutputStatement | ("Parameters"|"Parameter" ) as OutputParameters | ("Arguments" | "Argument") as OutputArguments
	("Token") as Token | "Id" as Id  | "Parser" as Parser
	("Conditional"|"Cond") as OutputConditional | "New Object" as OutputNewObject | "Result" as Result | "Pass" as Pass | "Fail" as Fail
	"Body" as OutputBody | "Type" as OutputType | "Exact" as OutputExact
	"Callable" as CallableOutput
	"Call" as OutputCall
	"Helper" as OutputHelper
	"Operator" as OutputOperator
	("StaticCall"|"Static Call"|"Static") as OutputStaticCall
	"Lambda" as OutputLambda
	"Braced" as OutputBraced
	"Output" as Output
	"Lineable" as LineableOutput
	"New" as OutputNewObject
	"A" as OutputArguments
	"B" as OutputBody
	"C" as OutputClass
	"E" as OutputExact
	"H" as OutputHelper
	"M" as OutputMethod
	"N" as OutputNewObject
	"O" as OutputOperator
	"P" as OutputParameters
	"S" as OutputStatement
	("T") as Token
	"V" as OutputVariable

name_var
	( name_atom ( ("->>" as getAllSafely | "->" as get) NAME ) as access+ ) as tokenAccess
	name_atom ( "+" name_atom )*
name_atom
	statement_as_char
	statement_as_method
	statement_as_quote
	statement_as_string
	quote
	NUMBER
	variable_names | (class_variable_names) as variable_names
type_var
	"$" as asVariable? type_atom ("." type_atom )* template_parameters?
type_atom
	statement_as_method
	statement_as_string
	( class_variable_names | class_names ) as class