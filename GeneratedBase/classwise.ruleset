comment-s are Braced
	[#,#] as COMMENT with WILD as comment
token-s
	[[a-zA-Z_][a-zA-Z0-9_]*] as NAME
	[[^a-zA-Z0-9_\\s\\n=\\(\\)\\{\\}\\[\\]\\;\\\"\\\']+] as OPERATOR
	[.*] as WILD
	"\n" as NEWLINE
	"class " as CLASS
	"interface " as INTERFACE
	"method" as METHOD
	"variable" as VARIABLE
	">" as IN
	"inner " as NER
	"<" as HID
	"hidden " as DEN
	"from " as FROM
	"->" as ACCESS
	"=" as EQUALS
	"," as COMMA
	"." as DOT
	";" as SEMICOLON
	":" as COLON
	"+=" as ADD
	"+" as PLUS
	"\\" as BACKSLASH
	"^" as CAMEL
	"cds" as CDS
	"clws" as CLWS
	"return" as RETURN
	"new " as NEW
	"if" as IF
	"else" as ELSE
	"while" as WHILE
	"for" as FOR

brace-s are Braced
	[{,}] as CLASS_BODY with class_element*
	[{,}] as METHOD_BODY with body_element*
	[(,)] as METHOD_PARAMETERS with ( variable_declaration ( COMMA variable_declaration )*)?
	[(,)] as PARAMETERS with ( method_argument ( COMMA method_argument )*)?
	[<,>] as TEMPLATE_PARAMETERS with type_var ( COMMA type_var )*
	[\",\"] as QUOTE with WILD
	[\',\'] as STATEMENT_AS_STRING with body_statement
	[,.] as CLASS_FILE with WILD as class_file_name
class_name-s
	[Boolean] as Boolean
	[String] as String
	[void] as _void
	[Integer] as Integer
	[Double] as Double
	[Float] as Float
variable_name-s are empty
base is silent
	base_element*
base_element is silent
	NEWLINE
	COMMENT
	imports
	anonymous_class
	class_declaration
	method_declaration
	variable_declaration SEMICOLON
imports
	IMPORT_CLASS
simport-s are Import
	[import <<class_file_name,\".clws\">>\n] as IMPORT_CLASS from base_element*; with CLASS_FILE CLWS

anonymous_class
	(HID|DEN) NAME as className in class_names (COLON|FROM) (name_var as packageName (DOT name_var as packageName)*)? SEMICOLON 
class_declaration
	(IN|NER) as inner? (CLASS|INTERFACE) as objectType (name_var as packageName (DOT name_var as packageName)*)? (variable_name|NAME) as className in class_names NEWLINE* ( type_var as parentName )? NEWLINE? ( type_var as interfaceName )* CLASS_BODY
class_element is silent
	NEWLINE
	COMMENT
	variable_declaration SEMICOLON
	method_declaration
body_element
	NEWLINE
	COMMENT
	((IN|NER) as inner? RETURN method_argument SEMICOLON ) as body_return
	body_conditional
	( variable_declaration SEMICOLON) as body_line
	body_manipulate
	( body_statement SEMICOLON ) as body_line
body_conditional
	(IN|NER) as inner? (IF|ELSE IF|WHILE) as conditional body_statement METHOD_BODY
	(IN|NER) as inner? ELSE as conditional METHOD_BODY
	(IN|NER) as inner? FOR as conditional variable_declaration OPERATOR body_statement METHOD_BODY
body_statement
	STATEMENT_AS_STRING as as_string
	(IN|NER) as inner? body_call ( NEWLINE* OPERATOR  NEWLINE* body_call )*
body_call
	(NEW type_var (NEWLINE* DOT NEWLINE* type_var)* PARAMETERS as parameters?) as group ( NEWLINE* DOT NEWLINE* (NAME PARAMETERS as parameters?) as group )*
	(name_var PARAMETERS as parameters?) as group ( NEWLINE* DOT NEWLINE* (NAME PARAMETERS as parameters?) as group )*
	(type_var (NEWLINE* DOT NEWLINE* type_var)* PARAMETERS as parameters?) as group ( NEWLINE* DOT NEWLINE* (NAME PARAMETERS as parameters?) as group )*
body_manipulate
	(IN|NER) type_var ( ACCESS name_var )? ADD  as methodName NEWLINE* ( class_declaration | method_declaration | variable_declaration | METHOD_BODY as body )
	(IN|NER) name_var ( COLON NAME as tokenName ( COLON NAME as variableName in variable_names )? NEWLINE* METHOD_BODY) as tokenInstance+

method_argument
	class_declaration
	method_declaration
	variable_declaration SEMICOLON
	body_statement

method_declaration
	(IN|NER) as inner? type_var (DOT type_var)* (name_var | NAME) as methodName METHOD_PARAMETERS METHOD_BODY
variable_declaration
	(IN|NER) as inner? type_var (DOT type_var)* (name_var | NAME ) as variableName in variable_names ( EQUALS method_argument)?


name_var
	( name_var_element as name_var ( ACCESS name_var_element as name_var )+ ) as access
	( name_var_element as name_var ( PLUS name_var_element as name_var )+ ) as concat
	name_var_element
name_var_element is silent
	STATEMENT_AS_STRING as as_string
	( CAMEL? QUOTE ) as exact
	( BACKSLASH CAMEL? (QUOTE|variable_name|NAME) ) as exact
	( CAMEL? variable_name ) as variable
type_var
	( type_var_element as type_var ( ACCESS type_var_element as type_var )+ ) as access
	( type_var_element as type_var ( PLUS type_var_element as type_var)+ ) as concat
	type_var_element
type_var_element is silent
	STATEMENT_AS_STRING as as_string
	( BACKSLASH CAMEL? ( variable_name | NAME )  TEMPLATE_PARAMETERS as template_parameters? ) as exact
	(CAMEL? class_name TEMPLATE_PARAMETERS as template_parameters? ) as class