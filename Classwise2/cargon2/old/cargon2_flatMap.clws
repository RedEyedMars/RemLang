imports cargon2
import regex

> %A rootSetCall = %A;
> Set<String> rulenames = new HashSet<String>();
> %A ignoreSpace = %A;
> void setup(%Pass result){
    %T root = result.getRoot();
    root : rule : rule {
      if rulenames.add('rule->ruleName') {
        String idName = "_"+'rule->ruleName';
        Parser += @Contender.Multiplicity 'idName' = new Contender.One(Token.Id.'idName');
        if rulenames.size() == 1{
          rootSetCall.add(|'idName'|);
        }
      }
    }
    if ignoreSpace.isEmpty() {
      ignoreSpace.add(|''" \\t\\n\\r"''|);
    }
  }
> void generate(%Pass result){
    %T root = result.getRoot();
    List<%T> rules = root->>rule;
    root : rule : rule {
      String variableName = "_"+'rule->ruleName';
      Parser::setup() += |'variableName'.set(`rule(rule)`);|
      Token.addId(variableName);
    }
  }
> %Output rule(%T rule){
    %Output subRule;
    %A definitions = %A();
    define(rule->definition,definitions);
    if definitions.isSingle() {
      subRule = definitions.get(0);
    }
    else {
      subRule = |new Contender.Branch(`definitions`)|;
    }
    if rule->braced_parameters != null {
      return %New Object().set(%Type("Braces").add("Contender"),%A().add(%E(Braces.addBrace(
         'rule->braced_parameters->left'.equals('rule->braced_parameters->right'),
         'rule->braced_parameters->left',
         'rule->braced_parameters->right',
         "\\"
         ))).add(subRule));
    }
    else {
      return subRule;
    }
  }
> void define(%T definition,%A definitions){
    %A args = %A();
    definition : chain : chain {
      args.add(element(chain->element));
    }
    if args.isSingle() {
      definitions.add(args.get(0));
    }
    else {
      definitions.add(|new Contender.Chain(`args`)|);
    }
    if definition->choice != null {
      define(definition->choice->definition,definitions);
    }
  }
> %New Object element(%T element){
    %A args = %A();
    if element->newName != null {
      String newName = "_"+'element->newName';
      args.add(|Token.Id.'newName'|);
      Token.addId(newName);
    }
    else {
      args.add(|null|);
    }
    element : quark 
      : braced_definition {
        args.add(rule(quark));
      }
      : quoteToken {
        StringBuilder quote = new StringBuilder();
        String string = quark.toString();
        IntStream.range(0,string.length()-1).forEach(I=>{
          if new Character(string.charAt(I)).toString().equals("\\") && string.charAt(I+1) != char\n && string.charAt(I+1) != char\t && string.charAt(I+1) != char\r {
            quote.append(string.charAt(I));
            quote.append(string.charAt(I));
          }
          else {
            quote.append(string.charAt(I));
          }});
        if new Character(string.charAt(string.length()-1)).toString().equals("\\") {
          quote.append(string.charAt(string.length()-1));
          quote.append(string.charAt(string.length()-1));
        }
        else {
          quote.append(string.charAt(string.length()-1));
        }
        args.add(|new Contender.Terminal('' quote.toString() '')|);
      }
      : regexToken {
        args.add(regex(quark->regex));
      }
      : ruleToken {
        String subRuleName = "_"+'quark';
        args.add(|'subRuleName'|);
      }
    if element->multiple == null {
      return %New Object().set(%Type("Contender").add("One"),args);
    }
    else {
      element->multiple : multiple : OPTIONAL {
        return %New Object().set(%Type("Contender").add("Optional"),args);
      }
      : MANY {
        return %New Object().set(%Type("Contender").add("Many"),args);
      }
      : PLUS {
        return %New Object().set(%Type("Contender").add("More"),args);
      }
      return null;
    }
    
  }
class com.rem.gen.parser.Parser < '"com.rem.output.helpers.OutputHelper.Parser<Parser.Result,Parser.Result.Pass>"' {
  @Contender.Multiplicity __ROOT__ = new Contender.One(Token.Id.ROOT);
  @Contender.Multiplicity __WHITESPACE__ = new Contender.Many(Token.Id.WHITESPACE); 
  void setup(){
    __ROOT__.set(`rootSetCall`);
    __WHITESPACE__.set(new Contender.Any(`ignoreSpace`));
  }
  Parser.Result.Pass asPass(Parser.Result result){
    return (result instanceof Parser.Result.Pass)?(Parser.Result.Pass)result:null;
  }
  
  %Result parse(String fileName) {
    long parseStartTime = System.currentTimeMillis();
    setup();
    try {
      File file = new File(fileName);
      if !file.exists() {
        return null;
      }
      BufferedReader reader = new BufferedReader(new FileReader(file));
      CharBuffer raw = CharBuffer.allocate((int) file.length()+1);
	  CharBuffer chars = CharBuffer.allocate((int) file.length()+1);
	  reader.read(raw);
      reader.close();
	  raw.position(0);
	  raw.chars().filter(I=>I!='"\'\\r\'"').forEach(I=>chars.put((char)I));
	  chars.position(0);
      %Result result = parse(chars);
      return result.setFileName(fileName).setParseTime(System.currentTimeMillis()-parseStartTime);
    }
    print catch IO {}
    return null;
  }
  %Result parse(CharBuffer chars){
    Map<Integer, Braces.Data> braceData = Braces.find(chars.duplicate());
    CharBuffer input = chars.duplicate();
    Contension contension = __ROOT__.contend(input,braceData);
    if !contension.hasErrors() && (input.remaining() == 0 || input.get() == 0) {
      Token rootToken = new Token(Token.Id.ROOT,null);
      contension.tokenize(rootToken);
      return new Parser.Result.Pass(rootToken);
    }
    else {
      ErrorList errors = new ErrorList();
      contension.getOnError().accept(errors);
      return new Parser.Result.Fail(chars.duplicate(),errors);
    }
  }
  
  class Result? {
    enum State {
      void PASS; void FAIL;
    }
    @String getStatus(State state){
      switch state {
      case \PASS { return ''"Passed"''; }
      case \FAIL { return ''"Failed"''; } 
      }
      return null;
    } 
    String fileName;
    long parseTime;
    State getState()?
    long accumulateTime(long sum){
      return sum +'"+"'+ parseTime;
    }
    void print(Consumer<String> consumer, boolean isSolo){
      consumer.accept(fileName);
      consumer.accept(''" "'');
      consumer.accept(getStatus(getState()));
      if isSolo {
        consumer.accept(''" in "'');
        consumer.accept(%Helper.getTimeAsString(parseTime));
      }
      consumer.accept(''"\\n"'');
      consumer.accept(this.toString());
    }
    Result setParseTime(long parseTime){
      this.parseTime = parseTime;
      return this;
    }
    Result setFileName(String newFileName){
      fileName = newFileName;
      return this;
    }
    class Pass Result {
      Token rootToken;
      Pass(Token rootToken){
        super();
        this.rootToken = rootToken;
      }
      Result.State getState(){ return Result.State.PASS; }
      String toString(){
        return ''""'';
	  }
    }
    class Fail Result {
      ErrorList errors;
      CharBuffer chars;
      Fail(CharBuffer chars, ErrorList errors){
        this.errors = errors;
        this.chars = chars;
      }
      Result.State getState(){ return Result.State.FAIL; }
      String toString(){
        return errors.toString(chars);
      }
    }
  }
}
interface com.rem.gen.parser.Contender {
  Contension contend(CharBuffer chars,Map<Integer, Braces.Data> braceData)?
  interface Multiplicity Contender {
    void set(Contender subContender)?
  }
  class One < Contender.Multiplicity {
    Contender contender;
    Token.Id id;
    One(Token.Id id){
      this.id = id;
    }
    One(Token.Id id, Contender contender){
      this.contender = contender;
      this.id = id;
    }
    void set(Contender contender){
      this.contender = contender;
    }
    Contension contend(CharBuffer chars,Map<Integer, Braces.Data> braceData){
      Contension result = contender.contend(chars,braceData);
      if result.hasErrors() {
        return result;
      }
      else if id == null{
          return result;
      }
      else {
        return new Contension.One(id,result).setOnError(result.getOnError());
      }
    }
  }
  class Optional < Contender.Multiplicity {
    Contender contender;
    Token.Id id;
    Optional(Token.Id id){
      this.id = id;
    }
    Optional(Token.Id id, Contender contender){
      this.contender = contender;
      this.id = id;
    }
    void set(Contender contender){
      this.contender = contender;
    }
    Contension contend(CharBuffer chars,Map<Integer, Braces.Data> braceData){
      Contension result = contender.contend(chars,braceData);
      if result.hasErrors() {
        return new Contension.Empty(id).setOnError(result.getOnError());
      }
      else if id == null {
        return result;
      }
      else {
        return new Contension.One(id,result).setOnError(result.getOnError());
      }
    }
  }
  class Many < Contender.Multiplicity {
    Contender contender;
    Token.Id id;
    Many(Token.Id id){
      this.id = id;
    }
    Many(Token.Id id, Contender contender){
      this.contender = contender;
      this.id = id;
    }
    void set(Contender contender){
      this.contender = contender;
    }
    Contension contend(CharBuffer chars,Map<Integer, Braces.Data> braceData){
      List<Contension> results = new ArrayList<Contension>();
      Contension result = contender.contend(chars,braceData);
      while !result.hasErrors() {
        results.add(result);
        result = contender.contend(chars,braceData);
      }
      if results.isEmpty() {
        return new Contension.Empty(id).setOnError(result.getOnError());
      }
      else {
        if results.size() == 1 {
          if id == null {
            return results.get(0).setOnError(result.getOnError());
          }
          else {
            return new Contension.One(id,results.get(0)).setOnError(result.getOnError());
          }
        }
        else {
          return new Contension.Many(id,results).setOnError(result.getOnError());
        }
      }
    }
  }
  class More < Contender.Multiplicity {
    Contender contender;
    Token.Id id;
    More(Token.Id id){
      this.id = id;
    }
    More(Token.Id id, Contender contender){
      this.contender = contender;
      this.id = id;
    }
    void set(Contender contender){
      this.contender = contender;
    }
    Contension contend(CharBuffer chars,Map<Integer, Braces.Data> braceData){
      List<Contension> results = new ArrayList<Contension>();
      Contension result = contender.contend(chars,braceData);
      while !result.hasErrors() {
        results.add(result);
        result = contender.contend(chars, braceData);
      }
      if results.isEmpty() {
        return result;
      }
      else {
        if results.size() == 1 {
          if id == null {
            return results.get(0).setOnError(result.getOnError());
          }
          else {
            return new Contension.One(id,results.get(0)).setOnError(result.getOnError());
          }
        }
        else {
          return new Contension.Many(id,results).setOnError(result.getOnError());
        }
      }
    }
  }
  class Branch < Contender {
    enum Import { Consumer consumer; }
    List<Contender> contenders;
    Branch(Contender... contenders){
      this.contenders = Arrays.asList(contenders);
    }
    Contension contend(CharBuffer chars,Map<Integer, Braces.Data> braceData){
      Map<Contension, Integer> positions_attained = Collections.synchronizedMap(new HashMap<Contension, Integer>());
      List<Consumer<ErrorList>> onErrors = Collections.synchronizedList(new ArrayList<Consumer<ErrorList>>(contenders.size()));
      Contension result = contenders.parallelStream().map(C=>{
        CharBuffer diver = chars.duplicate();
        '"Contension<?>"' contension = C.contend(diver,braceData);
        if !contension.hasErrors() {
	      positions_attained.put(contension,diver.position());
	      return contension;
        }
        else {
          onErrors.add(contension.getOnError());
          return null;
        }
        }).filter(C=>C!=null).findFirst().orElse(new Contension.Unsuccessful()
          .setOnError(
            errors=>onErrors.forEach(
                E=>E.accept(errors)
              )
            ));
      if !result.hasErrors() {
        chars.position(positions_attained.get(result));
	  }
	  return result;
	}
  }
  class Chain < Contender {
    List<Contender> contenders;
    Chain(Contender... contenders){
      this.contenders = Arrays.asList(contenders);
    }
    Contension contend(CharBuffer chars,Map<Integer, Braces.Data> braceData){
      int position = chars.position();
      List<Contension> results = new ArrayList<Contension>(contenders.size());
      return contenders.stream().map(C=>{
        Contension result = C.contend(chars,braceData);
        results.add(result);
        if result.hasErrors() {
          chars.position(position);
          return result;
        }
        else {
          return null;
        }
        }).filter(R=>R!=null).findFirst().orElse(new Contension.Many(null,results).setOnError(
          results.get(results.size()-1).getOnError()));
    }
  }
  
  class Terminal < Contender {
    String value;
    Terminal(String value){
      this.value = value;
    }
    Contension contend(CharBuffer chars,Map<Integer,Braces.Data> braceData){
      if value.length() > chars.remaining() {
        return new Contension.Unsuccessful().setOnError(
          errors=>errors.adjust(
          new ParseError.BufferEnd(null,chars.position())));
      }
      else {
        int position = chars.position();
        if value.chars().allMatch(C=>{
             char c = chars.get();
             while c == '"\'\\r\'"' {
               c = chars.get();
             }
             return C == c;}) {
          Parser.__WHITESPACE__.contend(chars,braceData);
          return new Contension.Concrete(Token.Id._SYNTAX,value);
        }
        else {
          chars.position(position);
          CharBuffer buffer = chars.duplicate();
          buffer.limit(value.length());
          return new Contension.Unsuccessful().setOnError(
            errors=>
            errors.adjust(
              new ParseError.WrongString(null,
                position,
                buffer.chars().boxed().reduce(new StringBuilder(),B,I=>{int i = I; B.append((char)i);return B;},N,P=>N).toString(),
                value.replace(''"\\n"'',''"\\\\n"'').replace(''"\\t"'',''"\\\\t"'').replace(''"\\r"'',''"\\\\r"''))));
        }
      }
    }
  }
  class Regex < Contender {
    List<Contender> contenders;
    String regex;
    Regex(String regex,Contender... contenders){
      this.regex = regex;
      this.contenders = Arrays.asList(contenders);
    }
    Contension contend(CharBuffer chars,Map<Integer, Braces.Data> braceData){
      int position = chars.position();
      List<Contension> results = new ArrayList<Contension>(contenders.size());
      Contension result = (('"Contension<?>"')contenders.stream().map(C=>{
        '"Contension"' contension = C.contend(chars,braceData);
        results.add(contension);
        if contension.hasErrors() {
          return contension;
        }
        else {
          return null;
        }
        }).filter(R=>R!=null).findFirst().orElse(new Contension.Regex(null,results)))
          .setOnError(
              errors=>errors.adjust(
              new ParseError.WrongRegex(null,position,chars.position()-position,regex))
            );
      if !result.hasErrors() {
        Parser.__WHITESPACE__.contend(chars,braceData);
      }
      else {
        chars.position(position);
      }
      return result;
    }
  }
  class Not < Contender {
    List<Contender> contenders;
    String options;
    Not(String options, Contender... contenders){
      this.contenders = Arrays.asList(contenders);
      this.options = options;
    }
    Contension contend(CharBuffer chars,Map<Integer, Braces.Data> braceData){
      if contenders.parallelStream().map(
          C=>C.contend(chars.duplicate(),braceData)).allMatch(Contension::hasErrors) {
          return new Contension.Concrete(Token.Id._SYNTAX,new Character(chars.get()).toString());
      }
      else {
          return new Contension.Unsuccessful().setOnError(
            errors=>errors.adjust(
            new ParseError.WrongString(null,chars.position(),chars.duplicate().get(),options)));
      }
    }
  }
  
  class Range < Contender {
    int lowerBound;
    int upperBound;
    String expected;
    Range(int lowerBound, int upperBound){
      this.lowerBound = lowerBound;
      this.upperBound = upperBound;
      this.expected = ((char)lowerBound)+''"-"''+((char)upperBound);
    }
    Contension contend(CharBuffer chars,Map<Integer,Braces.Data> braceData){
      if chars.remaining() == 0 {
        return new Contension.Unsuccessful().setOnError(
          errors=>errors.adjust(new ParseError.BufferEnd(null,chars.position())));
      }
      else {
        char c = chars.get();
        if c >= lowerBound && c <= upperBound {
          return new Contension.Concrete(Token.Id._SYNTAX,'' "" ''+c);
        }
        else {
          chars.position(chars.position()-1);
          return new Contension.Unsuccessful().setOnError(
            errors=>errors.adjust(
            new ParseError.WrongString(null,chars.position(),c,expected)));
        }
      }
    }
  }
  class Any < Contender {
    String value;
    Any(String value){
      this.value = value;
    }
    Contension contend(CharBuffer chars,Map<Integer,Braces.Data> braceData){
      if chars.remaining() == 0 {
        return new Contension.Unsuccessful().setOnError(
            errors=>errors.adjust(
            new ParseError.BufferEnd(null,chars.position())));
      }
      else {
        char c = chars.get();
        if value.chars().anyMatch(C=>C==c) {
          return new Contension.Concrete(null,new Character(c).toString());
        }
        else {
          chars.position(chars.position()-1);
          return new Contension.Unsuccessful().setOnError(
            errors=>errors.adjust(
            new ParseError.WrongString(null,chars.position(),c,value)));
        }
      }
    }
  }
  class Char < Contender {
    char value;
    Char(char value){
      this.value = value;
    }
    Contension contend(CharBuffer chars,Map<Integer,Braces.Data> braceData){
      if chars.remaining() < 1 {
        return new Contension.Unsuccessful().setOnError(
            errors=>errors.adjust(
            new ParseError.BufferEnd(null,chars.position())));
      }
      else {
        char c = chars.get();
        if c == this.value {
          return new Contension.Concrete(Token.Id._SYNTAX,''""''+value);
        }
        else {
          chars.position(chars.position()-1);
          return new Contension.Unsuccessful().setOnError(
            errors=>errors.adjust(
            new ParseError.WrongString(null,chars.position(),new Character(c).toString(),new Character(value).toString())));
        }
      }
    }
    
  }
}

class com.rem.gen.parser.Braces {
  interface Brace {
    boolean open(int c1, int c2)?
    boolean close(int c1, int c2)?
    boolean ignore(int c)?
    boolean isLock()?
    int advanceOpen()?
    int advanceClose()?
    String getOpenString()?
    String getCloseString()?
  }
  class B11 < Brace {
    char ignore = char\\;
    char open;
    char close;
    boolean isLock = false;
    B11(char o, char c, char i, boolean isLock){
      open = o;
      close = c;
      ignore = i;
      this.isLock = isLock;
    }
    boolean open(int c1, int c2) { return c1==open;  }
    boolean close(int c1, int c2){ return c1==close; }
    boolean ignore(int c){         return c==ignore; }
    boolean isLock(){              return isLock;    }
    int advanceOpen(){             return 1;         }
    int advanceClose(){            return 1;         }
    String getOpenString(){        return new Character(open).toString(); }
    String getCloseString(){       return new Character(close).toString();}
  }
  class B12 < Brace {
    char ignore = char\\;
    char open;
    char close1;
    char close2;
    boolean isLock = false;
    B12(char o, char c1, char c2, char i, boolean isLock){
      open = o;
      close1 = c1;
      close2 = c2;
      ignore = i;
      this.isLock = isLock;
    }
    boolean open(int c1, int c2) { return c1==open;  }
    boolean close(int c1, int c2){ return c1==close1&&c2==close2; }
    boolean ignore(int c){         return c==ignore; }
    boolean isLock(){              return isLock;    }
    int advanceOpen(){             return 1;         }
    int advanceClose(){            return 2;         }
    String getOpenString(){        return new Character(open).toString(); }
    String getCloseString(){       return new Character(close1).toString()+new Character(close2).toString();}
  }
  class B21 < Brace {
    char ignore = char\\;
    char open1;
    char open2;
    char close;
    boolean isLock = false;
    B21(char o1, char o2, char c, char i, boolean isLock){
      open1 = o1;
      open2 = o2;
      close = c;
      ignore = i;
      this.isLock = isLock;
    }
    boolean open(int c1, int c2) { return c1==open1&&c2==open2;  }
    boolean close(int c1, int c2){ return c1==close; }
    boolean ignore(int c){         return c==ignore; }
    boolean isLock(){              return isLock;    }
    int advanceOpen(){             return 2;         }
    int advanceClose(){            return 1;         }
    String getOpenString(){        return new Character(open1).toString()+new Character(open2).toString(); }
    String getCloseString(){       return new Character(close).toString();}
  }
  class B22 < Brace {
    char ignore = char\\;
    char open1;
    char open2;
    char close1;
    char close2;
    boolean isLock = false;
    B22(char o1, char o2, char c1, char c2, char i, boolean isLock){
      open1 = o1;
      open2 = o2;
      close1 = c1;
      close2 = c2;
      ignore = i;
      this.isLock = isLock;
    }
    boolean open(int c1, int c2) { return c1==open1&&c2==open2;  }
    boolean close(int c1, int c2){ return c1==close1&&c2==close2; }
    boolean ignore(int c){         return c==ignore; }
    boolean isLock(){              return isLock;    }
    int advanceOpen(){             return 2;         }
    int advanceClose(){            return 2;         }
    String getOpenString(){        return new Character(open1).toString()+new Character(open2).toString(); }
    String getCloseString(){       return new Character(close1).toString()+new Character(close2).toString();}
  }
  class Contender < '"com.rem.gen.parser"'.Contender {
    Brace brace;
    '"com.rem.gen.parser"'.Contender contender;
    Contender(Integer braceIndex, '"com.rem.gen.parser"'.Contender contender){
      this.brace = Braces.braces.get(braceIndex);
      this.contender = contender;
    }
    Contension contend(CharBuffer chars, Map<Integer,Data> braceData){
      Data data = braceData.get(chars.position());
      if data != null && brace == data.getBrace() {
        CharBuffer buffer = chars.duplicate();
        buffer.position(buffer.position()+data.getBrace().advanceOpen());
        Parser.__WHITESPACE__.contend(buffer,braceData);
        buffer.limit(data.getClose());
        '"Contension<?>"' contension = contender.contend(buffer,braceData);
        if contension.hasErrors() || buffer.position() != data.getClose() {
          CharBuffer dupe = chars.duplicate();
          Consumer<ErrorList> previousOnError = contension.getOnError();
          contension.setOnError(
            errors=>{
              previousOnError.accept(errors);
              errors.adjust(
                new ParseError.WrongString(
                  null,
                  chars.position(),
                  IntStream.range(0,brace.advanceClose()).boxed().reduce(new StringBuilder(),B,I=>{B.append((char)dupe.get());return B;},P,N=>P).toString(),
                  brace.getCloseString()));});
        }
        chars.position(data.getClose()+brace.advanceClose());
        Parser.__WHITESPACE__.contend(chars,braceData);
        return contension;
      }
      else {
        CharBuffer dupe = chars.duplicate();
        return new Contension.Unsuccessful().setOnError(
            errors=>errors.adjust(
            new ParseError.WrongString(
                null,
                chars.position(),
                IntStream.range(0,brace.advanceOpen()).boxed().reduce(new StringBuilder(),B,I=>{B.append((char)dupe.get());return B;},P,N=>P).toString(),
                brace.getOpenString())));
      }
    }
  }
  > %A braces_2_2 = %A;
  > %A braces_2_1 = %A;
  > %A braces_1_2 = %A;
  > %A braces_1_1 = %A;
  > %A allBraces = %A.add(braces_2_2).add(braces_2_1).add(braces_1_2).add(braces_1_1);
  > Map<String,Integer> allBraceMap = new HashMap<String,Integer>();
  > void setup(){
  }
  > Integer addBrace(boolean lock, String open, String close, String ignore){
    if !allBraceMap.containsKey(open+''" "''+close) {
      if open.length() == 1 {
        if close.length() == 1 {
          braces_1_1.add(|new Braces.B11(`%E("'"+open.charAt(0)+"'")`,`%E("'"+close.charAt(0)+"'")`,`%E(("'"+ignore.charAt(0)+"'").replace("\\","\\\\"))`,`%E(lock)`)|);
        }
        else {
          braces_1_2.add(|new Braces.B12(`%E("'"+open.charAt(0)+"'")`,`%E("'"+close.charAt(0)+"'")`,`%E("'"+close.charAt(1)+"'")`,`%E(("'"+ignore.charAt(0)+"'").replace("\\","\\\\"))`,`%E(lock)`)|);
        }
      }
      else {
        if close.length() == 1 {
          braces_2_1.add(|new Braces.B21(`%E("'"+open.charAt(0)+"'")`,`%E("'"+open.charAt(1)+"'")`,`%E("'"+close.charAt(0)+"'")`,`%E(("'"+ignore.charAt(0)+"'").replace("\\","\\\\"))`,`%E(lock)`)|);
        }
        else {
          braces_2_2.add(|new Braces.B22(`%E("'"+open.charAt(0)+"'")`,`%E("'"+open.charAt(1)+"'")`,`%E("'"+close.charAt(0)+"'")`,`%E("'"+close.charAt(1)+"'")`,`%E(("'"+ignore.charAt(0)+"'").replace("\\","\\\\"))`,`%E(lock)`)|);
        } 
      }
      allBraceMap.put(open+''" "''+close,allBraceMap.size());
    }
    return allBraceMap.get(open+''" "''+close);
  }
  @List<Brace> braces = Arrays.asList(`allBraces`);
  @Map<Integer,Data> find(CharBuffer chars){
    Stack<Data> data = new Stack<Data>();
    Map<Integer, Data> positions = new HashMap<Integer,Data>();
    OfInt itr = chars.duplicate().chars().iterator();
    if !itr.hasNext() {
      return positions;
    }
    boolean locked = false;
    boolean ignored = false;
    int position = 0;
    int c1;
    int c2;
    int c3 = itr.next();
    if !itr.hasNext() {
      return positions;
    }
    c2 = c3;
    c3 = itr.next();
    int cf1 = c2;
    int cf2 = c3;
    Brace open = braces.stream().filter(B=>B.open(cf1,cf2)).findAny().orElse(null);
    if open != null {
      data.push(new Data(position,open));
      locked = open.isLock();
    }
    while itr.hasNext() {
      c1 = c2;
      c2 = c3;
      c3 = itr.next();
      ++position;
      
      if !ignored && locked && data.peek().getBrace().ignore(c2) {
        ignored = true;
      }
      else if ignored {
        ignored = false;
      }
      else if !data.isEmpty() && data.peek().getBrace().close(c2,c3) {
          locked = false;
          data.pop().close(position,positions);
      }
      else if !locked {
        int cf3 = c1;
        int cf4 = c2;
        int cf5 = c3;
        open = braces.stream().filter(B=>!B.ignore(cf3)&&B.open(cf4,cf5)).findAny().orElse(null);
        if open != null {
          data.push(new Data(position,open));
          locked = open.isLock();
        }
      }
    }
    return positions;
  }
  class Data {
    Integer open;
    Integer close;
    Brace brace;
    
    Data(Integer start, Brace brace){
      this.open = start;
      this.brace = brace;
    }
    void close(Integer close, Map<Integer, Data> positions){
      this.close = close;
      positions.put(open,this);
    }
  }
}
class com.rem.gen.parser.Contension? <T> {
  Function<Consumer<Consumer<Token>>, Stream<Consumer<Void>> > onSuccess()?
  Consumer<ErrorList> onError;
  
  Token.Id id;  T value;
  Contension(Token.Id id, T value){
    this.id = id;
    this.value = value;
  }
  boolean hasErrors(){
    return false;
  }
  Contension setOnError(Consumer<ErrorList> newOnError){
    this.onError = newOnError;
    return this;
  }
  class Unsuccessful Contension<Integer> {
    Unsuccessful(){
    }
    onSuccess(){
      return null;
    }
    boolean hasErrors(){
      return true;
    }
  }
  class Empty Contension<Void> {
    Empty(Token.Id id){
      super(id,null); 
    }
    Function<Consumer<Consumer<Token>>, Stream<Consumer<Void>> > onSuccess(){
      return Ts=>Stream.empty();
    }
  }
  class Concrete Contension<String> {
    
    Concrete (Token.Id id, String value){
      super(id,value);
    }
    
    Function< Consumer<Consumer<Token>>, Stream<Consumer<Void>> > onSuccess(){
      return Ts=>Stream.of(()=>Ts.accept(new Token(id,value)));
    }
  }
  class One {
    class WithoutId Contension<Contension> {
      WithoutId (Token.Id id, Contension value){
        super(id,value);
      }
      Function< Consumer<Consumer<Token>>, Stream<Consumer<Void>> > onSuccess(){
        return value.onSuccess();
      }
    }
    class WithId Contension<Contension> {
      WithId (Token.Id id, Contension value){
        super(id,value);
      }
      Function< Consumer<Consumer<Token>>, Stream<Consumer<Void>> > onSuccess(){
        return parent=>{
            Token child = new Token(id,null);
            return 
              Stream.of(Stream.of(()=>parent.accept(child)),value.onSuccess().apply(child)).flatMap(S=>S);
          };
      }
    }
  }
  class Many {
    class WithoutId Contension<Contension> {
      boolean hasErrors = false;
      WithoutId (Token.Id id, Contension value){
        super(id,value);
        hasErrors = this.value.stream().anyMatch(Contension::hasErrors);
      }
      Function< Consumer<Consumer<Token>>, Stream<Consumer<Void>> > onSuccess(){
        return parent=>this.value.stream().flatMap(C=>C.onSuccess().apply(parent));
      }
      boolean hasErrors(){
        return hasErrors;
      }
    }
    class WithId Contension<Contension> {
      WithId (Token.Id id, Contension value){
        super(id,value);
        hasErrors = this.value.stream().anyMatch(Contension::hasErrors);
      }
      Function< Consumer<Consumer<Token>>, Stream<Consumer<Void>> > onSuccess(){
        return parent=>{
                 Token child = new Token(id, null);
                 return Stream.of(Stream.of(()=>parent.accept(child)),
                                  this.value.stream().flatMap(C=>C.onSuccess().apply(child))).flatMap(S=>S);
      }
      boolean hasErrors(){
        return hasErrors;
      }
    }
  }
  class Regex Contension<List<Contension>> < Consumer<Token> {
    StringBuilder builder = new StringBuilder();
    boolean hasErrors = false;
    Regex (Token.Id id, List<Contension> value){
      hasErrors = this.value.stream().anyMatch(Contension::hasErrors);
      if id == null {
        this.onSuccess = Ts => {
          value.stream().forEach(C=>C.tokenize(Contension.Regex.this));
          Ts.accept(new Token(Token.Id._SYNTAX,builder.toString()));
        };
      }
      else {
        this.onSuccess = Ts => {
          value.stream().forEach(C=>C.tokenize(Contension.Regex.this));
          token.accept(new Token(id,builder.toString()));
        };
      }
    }
    boolean hasErrors(){
      return hasErrors;
    }
    void accept(Token token){
      if token.getValue() == null {
        token.build(this);
      }
      else {
        builder.append(token.getValue());
      }
    }
  }
}

class com.rem.gen.parser.Token < Consumer<Token> {
> Set<String> idNames = new HashSet<String>();
> void addId(String idName){
    if idNames.add(idName){
      Token.Id += void 'idName';
    }
  }
  enum Id {
    void ROOT;
    void WHITESPACE;
    void _SYNTAX;
  }
  List<Token> children;
  Map<Id, List<Token>> map;
  String value;
  Id id;
  Token(Id id, String value){
    this.id = id;
    if value != null {
      this.value = value;
    }
    else {
     this.children = new ArrayList<Token>();
     this.map = new EnumMap<Id, List<Token>>(Id.class);
    }
  }
  void accept(Token newToken){
    this.children.add(newToken);
    if this.map.containsKey(newToken.id) == false {
      this.map.put(newToken.id,new ArrayList<Token>());
    }
    this.map.get(newToken.id).add(newToken);
  }
  void build(Consumer<Token> builder){
    if children != null {
      children.forEach(builder);
    }
    else {
      builder.accept(this);
    }
  }
  Token get(Id id){
    List<Token> result = map.get(id);
    if result != null && result.isEmpty() == false {
      return result.get(0);
    }
    else {
      return null;
    }
  }
  List<Token> getAll(){
    return children;
  }
  List<Token> getAllSafely(Id id){
    List<Token> result = map.get(id);
    if result != null {
      return result;
    }
    else {
      return new ArrayList<Token>();
    }
  }
  String toString(){
    if children == null {
      return value;
    }
    else {
      return children.isEmpty()?null:children.get(0).toString();
    }
  }
  void print(){
    print(System.'"out"'::print);
  }
  void print(Consumer<String> consumer){
    print(0,consumer);
  }
  void print(int tabs, Consumer<String> consumer){
    if id == Token.Id.ROOT {
      if children != null {
        children.forEach(C=>C.print(tabs,consumer));
      }
      return;
    }
    if tabs != 0 { consumer.accept(''"\\n"''); }
    IntStream.range(0,tabs).forEach(I=>consumer.accept(''"  "''));
    consumer.accept(id.toString().substring(1));
    if children == null {
      consumer.accept(''":"''+value);
    }
    else {
      children.forEach(C=>C.print(tabs+''"+"''+1,consumer));
    }
  }
  Token.Id getName() {
    return id;
  }
  String getValue(){
    return toString();
  }
}

class com.rem.gen.parser.ErrorList {
  List<ErrorList> children = new ArrayList<ErrorList>();
  ParseError error = null;
  ErrorList(){
  }
  ErrorList(ParseError error){
    this.error = error;
  }
  void adjust(ParseError newError){
    if error==null||newError.getPosition() > error.getPosition() {
      error = newError;
    }
  }
  void merge(Token.Id id, ErrorList errors){
    children.addAll(errors.children);
    if errors.error != null {
      adjust(errors.error);
    }
  }
  void append(ErrorList errors){
    children.add(errors);
  }
  boolean isEmpty(){
   return error == null && children.isEmpty();
 }
 String toString(CharBuffer chars){
   StringBuilder builder = new StringBuilder();
   List<Integer> lines = new ArrayList<Integer>();
   CharBuffer liner = chars.duplicate();
   IntStream.range(0,chars.limit()).forEach(I=>{if liner.get()=='"\'\\n\'"' {lines.add(I);}});
   toString('"builder::append"',lines,chars);
   return builder.toString();
 }
 void toString(Consumer<String> builder,List<Integer> lines,CharBuffer chars){
   children.forEach(C=>C.toString(builder,lines,chars));
   if error != null {
     error.toString(builder,lines,chars);
   }
 }
}
class com.rem.gen.parser.ParseError? {
  Token.Id id;
  Integer position;
  ParseError(Token.Id id, Integer position){
    this.id = id;
    this.position = position;
  }
  int getLine(List<Integer> lines){
    return IntStream.range(0,lines.size()).parallel().filter(I=>position<=lines.get(I)).findFirst().orElse(lines.size());
  }
  
  void toString(Consumer<String> builder, List<Integer> lines, CharBuffer chars){
    chars = chars.duplicate();
    int lineIndex = getLine(lines);
    int position;
    if lineIndex > 0 {
      position = this.position - lines.get(lineIndex-1);
    }
    else {
      position = this.position;
    }
    builder.accept(''"Error on line "'');
    builder.accept(new Integer(lineIndex).toString());
    builder.accept(''":"'');
    description(builder,position);
    builder.accept(''"\\n"'');
    if lines.size() > 1 {
      if lineIndex > 1 {
        chars.position(lines.get(lineIndex-1));
      }
      if lineIndex < lines.size() {
        chars.limit(lines.get(lineIndex));
      }
    }
    chars.chars().forEach(I=>builder.accept(new Character((char)I).toString()));
    builder.accept(''"\\n"'');
    IntStream.range(0,position).forEach(I=>builder.accept(''" "''));
    builder.accept(''"^\\n"'');
  }
  void description(Consumer<String> builder, int carrotPosition)?
  class BufferEnd ParseError {
    BufferEnd(Token.Id id, Integer position){
      super(id,position);
    }
    void description(Consumer<String> builder, int carrotPosition){
      builder.accept(''"Unexpected End of Input:"'');
    }
  }
  class WrongString ParseError {
    String found;
    String options;
    WrongString(Token.Id id, Integer position, char found, String options){
      super(id,position);
      this.found = new Character(found).toString();
      this.options = options;
    }
    WrongString(Token.Id id, Integer position, String found, String options){
      super(id,position);
      this.found = found;
      this.options = options;
    }
    void description(Consumer<String> builder, int carrotPosition){
      if this.found.length()<=1 {
        builder.accept(''"Char"'');
      }
      else {
        builder.accept(''"String"'');
      }
      builder.accept(''" Expected: "'');
      builder.accept(this.options);
      builder.accept(''"\\t but found: "'');
      builder.accept(this.found);
    }
  }
  class WrongRegex ParseError {
    Integer subPosition;
    String options;
    WrongRegex(Token.Id id, Integer position, Integer subPosition, String options){
      super(id,position);
      this.subPosition = subPosition;
      this.options = options;
    }
    void description(Consumer<String> builder, int carrotPosition){
      builder.accept(''"Error:\\n"'');
      builder.accept(''"\\tRegex Failed: "'');
      builder.accept(this.options);
      builder.accept(''"\\t At:\\n"'');
      
      IntStream.range(0,carrotPosition+''"+"''+subPosition).forEach(I=>builder.accept(''" "''));
      builder.accept(''"v"'');
    }
  }
}






