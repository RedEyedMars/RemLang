imports import

import classes
import methods
import bodies
import variables
> enum OutOfScopeVariableNames {
  enum CREATE {}
  enum MODIFY {}
  }
> String innerPackageName = "com.rem.gen";

> %Body setupClassList = %Body ();

> ClasswiseGenerator classwise = new ClasswiseGenerator();
> class ClasswiseGenerator {

  @String mainClassName = "MainFlow";
  File innerDirectory = null;
  File outerDirectory = null;
  
  @%C mainClass = null;

  String sourceDirectory = null;
  void setup(%Pass result){
    String fileName = result.getFileName();
	int indexOfDot = fileName.lastIndexOf(".");
	if indexOfDot > -1 {
	  fileName = fileName.substring(0,indexOfDot);
	}
	int indexOfSlash = fileName.lastIndexOf("/");
	if indexOfSlash > -1 {
	  fileName = fileName.substring(indexOfSlash+1);
	}
	indexOfSlash = fileName.lastIndexOf("\\");
	if indexOfSlash > -1 {
	  fileName = fileName.substring(indexOfSlash+1);
	}
	fileName = %Helper.camelize(fileName);
	mainClassName = fileName;
	innerDirectory = new File("../"+fileName+"/src");
	innerDirectory.mkdirs();
	outerDirectory = new File("../"+fileName+"/src",innerPackageName.replace(".","/"));
	outerDirectory.mkdirs();
	sourceDirectory = "../"+fileName+"/src/";
  }
  void importAllClasses(%T input) {
    input : element : anonymous_classes {
      %Call classPackageName = %Call();
      element : packageElement : packageName {
	    if packageElement->NAME != null {
  	      classPackageName.add(%E('packageElement->NAME'));
	    }
	    else if packageElement->quote != null {
	      classPackageName.add(%E('packageElement->quote'));
	    }
	    else if packageElement->statement_as_string != null {
	      classPackageName.add(body_gen.statement(packageElement->statement_as_string->body_statement,true,mainClass));
	    }
	    else if packageElement->statement_as_carrot_string != null {
	      classPackageName.add(body_gen.statement(packageElement->statement_as_carrot_string->body_statement,true,mainClass));
	    }
	  }
	  element : anonymousClass : anonymous_class {
	    defineAnonymousClass(anonymousClass, true, classPackageName.evaluate(), "");
	  }
    }
  }
  void defineAnonymousClass(%T anonymousClass, boolean isFirst, String anonymousPackageName, String parentClass) {
    StringBuilder currentClass = new StringBuilder();
    currentClass.append(parentClass);
    anonymousClass : className : className {
      if isFirst == false { currentClass.append("."); }
	  currentClass.append(className);
	  String currentClassValue = 'currentClass';
	  setupClassList.add(|'"com.rem.lang.helpers.output.OutputClassStructure"'.suppliment('' anonymousPackageName '', '' currentClassValue '');|);
	  %Helper.suppliment('anonymousPackageName','currentClassValue');
	}
	
	anonymousClass :  subAnonymousClass : anonymous_class { 
	  defineAnonymousClass(subAnonymousClass, false, anonymousPackageName, 'currentClass');
	}
  }
  void findAllClasses(%T input){
    input : element : import_imports {
      importAllClasses(element);
    }
    input : element : import_clws {
      findAllClasses(element);
    }
    
    input : element : class_declaration {
      classGenerator.collectClassNames(element);
    }
  }
  void generateGlobals(%T input){
    input : element : import_clws {
      generateGlobals(element);
    }
    input : element : variable_declaration {
	  %V newVariable = variable.declaration(element,true,mainClass).isStatic().isPublic();
	  mainClass.addVariable(newVariable);
	  variable.addDefinedVariableName(newVariable);
	}
    input : element : method_declaration {
	  %M newMethod = method.declaration(element,true,mainClass).isStatic();
	  mainClass.addMethod(newMethod);
	  method.addDefinedMethodName(newMethod);
	}
  }
  void generateAll(%T input){
    input : element : import_clws {
      generateAll(element);
    }
    
    input : element : class_declaration {
      classGenerator.collectClassNames(element);
    }
    input : element : class_declaration {
      %C innerClass = new %C();
      %C outerClass = classGenerator.declaration(element, innerClass,element->inner != null,null);
	  if element->inner == null {
	    innerClass.addVariable(@'"com.rem.lang.helpers.output.OutputClass"' OUTPUT = `outerClass.stasis()`.mark(););
	  
		setupClassList.add(|'"com.rem.lang.helpers.output.OutputClassStructure"'.addOutputClass(`outerClass.getName()`.OUTPUT);|);
      }
      %Helper.addOutputClass(innerClass);
    }
	
  }
> void generate(%Pass result){
	String stopper = "com.rem.lang.helpers.ParseControlPort.startDefaultStopper";
	String runner = "isRunning";
	%T root = result.getRoot();
	
	root : element : parse_declaration {
	    if element->stopper != null {
	      if element->stopper->method != null {
	        stopper = 'element->stopper->method';
	      }
	      else if element->runner != null {
	        runner = 'element->runner';
	      }
	    }
	  }
    %A parseArguments = %A();
	parseArguments.add(|'mainClassName+"::"+runner'|);
	parseArguments.add(%E("args"));
	int numberOfParsers = 0;
	root : element : parse_declaration {
	    if element->stopper == null && element->runner == null {
	      StringBuilder fullClassName = new StringBuilder();
	      boolean isFirst = true;
	      element : atom : packageName {
	        if !isFirst {
	          fullClassName.append(".");
	        }
	        fullClassName.append('atom');
	        isFirst = false;
	      }
	      StringBuilder tokenClassName = new StringBuilder();
	      tokenClassName.append(fullClassName.toString());
	      if !isFirst {
	        tokenClassName.append(".");
	      }
	      tokenClassName.append("Token");
	      if !isFirst {
	        fullClassName.append(".");
	      }
	      fullClassName.append('element->parserType');
	      
	      String onCreateMethod = 'element->onCreate';
	      String onModifyMethod = 'element->onModify';
	      String onParseMethod = 'element->onParse';
	      parseArguments.add(|new '"com.rem.lang.helpers.ParseControlPort.ParserPackage<"+fullClassName.toString()+".Result,"+fullClassName.toString()+".Result.Pass,"+tokenClassName.toString()+">"'(
	        '' element->extension '',new 'fullClassName.toString()'(),
	          T=>{switch T {
	            case CREATE {return 'mainClassName+"::"+onCreateMethod';}
	            case MODIFY {return 'mainClassName+"::"+onModifyMethod';}}return null;},
	            'mainClassName+"::"+onParseMethod')|);
	      ++numberOfParsers;
	    }
	  }
	if numberOfParsers == 0{
	  parseArguments.add(|new '"com.rem.gen.parser.Parser"'()|);
	  parseArguments.add(|'mainClassName'::setup()|);
	  parseArguments.add(|'mainClassName'::generate()|);
	  #parseArguments.add(|new '"com.rem.lang.helpers.ParseControlPort.ParserPackage<com.rem.gen.parser.Parser.Result,com.rem.gen.parser.Parser.Result.Pass,com.rem.gen.parser.Token>"'(
	    null,new '"com.rem.gen.parser.Parser"'(),
	    T=>{switch T {
	        case CREATE {return 'mainClassName'::onCreate;}
	        case MODIFY {return 'mainClassName'::onModify;}}return null;},
	        'mainClassName'::onParse)|);#
    }
    mainClass = class  'innerPackageName'.'mainClassName' {
        @boolean running = true;
        @void main(String[] args){
           'mainClassName'.init();
           '"com.rem.lang.helpers.ParseControlPort"'.ruminate(`parseArguments`);
           #'stopper'('mainClassName+"::"+runner','mainClassName'::stop);#
        }
        @void init() {`setupClassList`;}
        @boolean isRunning(){
          return running;
        }
        @Boolean stop(){
          running = false;
          '"com.rem.lang.helpers.ParseControlPort"'.end();
          return true;
        }
      };
	
    findAllClasses(result.getRoot());
    generateGlobals(result.getRoot());
	generateAll(result.getRoot());
	%Helper.addOutputClass(mainClass);
  }
> %Output name_var(%T input, boolean isInner, %Context context){
    if input->tokenAccess != null {
      return tokenAccess(input->tokenAccess,isInner,context);
    }
    else {
      %Concatenation result = %Concatenation();
      
      input : atom : name_atom {
	    result.add(name_atom(atom,isInner,context));
      }
      
      if input->cast_statement !=null{
        %Cast cast = new %Cast();
        input : atom : cast_statement {
          cast.type(classwise.all_type(atom->all_type_name,isInner,context));
        }
        return cast.subject(result);
      }
      else {
        return result;
      }
    }
  }
  %Output tokenAccess(%T element, boolean isInner, %Context context){
     %Callable call = %Call().add(name_atom(element->name_atom,isInner,context));
     element : atom : access {
       String name = 'atom->NAME';
       if atom->get != null {
	     call.add(%E("get"),        %A().add(%E("com.rem.gen.parser.Token.Id._"+name)));
	   }
	   else if atom->getAllSafely != null {
	     call.add(%E("getAllSafely"),%A().add(%E("com.rem.gen.parser.Token.Id._"+name)));
	   }
	 }
	 return call;
  }
  %Output name_atom(%T input, boolean isInner, %Context parentContext) {
    if input->statement_as_char != null {
      String value = 'input->statement_as_char->value';
      if value.equals("\\") {
        value = "\\\\";
      }
      else if value.equals("\"") {
        value = "\\\"";
      }
      else if value.equals("\'") {
        value = "\\\'";
      }
      return new %Braced().set(%E(value.replace("\\","\\\\"))).style("'","'");
	}
    else if input->statement_as_method != null {
      if isInner {
		return body_gen.statement(input->statement_as_method->body_statement,true,parentContext);
      }
      else {
		return body_gen.statement(input->statement_as_method->body_statement,true,parentContext).vibrate();
	  }
	}
	else if input->statement_as_quote != null {
	  %Output asQuoteStatement = body_gen.statement(input->statement_as_quote->body_statement,true,parentContext);
	  if isInner {
		return %Quote().set(asQuoteStatement);
      }
	  else {
		return %Quote().set(asQuoteStatement.vibrate()).stasis();
      }
	}
	else if input->statement_as_string != null {
	  %Output result = %String().set(body_gen.statement(input->statement_as_string->body_statement,true,parentContext).vibrate());
	  return result;
	}
	else if input->quote != null {
	  if isInner {
		return %Quote().set('input->quote');
      }
	  else {
		return %Quote().set('input->quote').stasis();
      }
	}
	else if input->NUMBER != null {
	  return %Exact('input->NUMBER');
	}
	else if input->variable_names != null {
	  String value = 'input->variable_names';
 	  if isInner && mainClass.hasVariable(value) && (parentContext == null || parentContext.hasVariableInContext(value) == false) {
 	    value = mainClassName+"."+value;
 	  }
 	  return %E(value);
 	  
	}
	else {
	  input.err();
	  return null;
	}
  }
> boolean stringifyTypeVar(%T type_var, StringBuilder accessMethodBuilder, boolean isQuoting){
    boolean isFirstSubType = true;
    type_var : type_atom : type_atom {
      if !isFirstSubType {
        if isQuoting {
          accessMethodBuilder.append(".");
        }
        else {
          accessMethodBuilder.append("+\".");
          isQuoting = true;
        }
      }
      if type_atom->statement_as_string != null {
        if isQuoting {
          accessMethodBuilder.append("\"+"+'type_atom->statement_as_string->body_statement');
          isQuoting = false;
        }
        else {
          accessMethodBuilder.append("+"+'type_atom->statement_as_string->body_statement');
        }
      }
      else if type_atom->statement_as_method != null {
        if isQuoting {
          accessMethodBuilder.append("\"+"+'type_atom->statement_as_method->body_statement');
          isQuoting = false;
        }
        else {
          accessMethodBuilder.append("+"+'type_atom->statement_as_method->body_statement');
        }
      }
      else {
        if isQuoting {
          accessMethodBuilder.append('type_atom');
        }
        else {
          accessMethodBuilder.append("+\""+'type_atom');
          isQuoting = true;
        }
      }
      isFirstSubType = false;
    }
    if type_var->template_parameters != null {
      if isQuoting {
        accessMethodBuilder.append("<");
      }
      else {
        accessMethodBuilder.append("+\"<");
        isQuoting = true;
      }
      boolean isFirstParameter = true;
      type_var : parameters : template_parameters {
        parameters : parameter : template_parameter {
          if !isFirstParameter {
            if isQuoting {
              accessMethodBuilder.append(",");
            }
            else {
              accessMethodBuilder.append("+\",");
              isQuoting = true;
            }
          }
          parameter : any_type
            : all_type_name {
              any_type : type : type_var {
                isQuoting = stringifyTypeVar(type,accessMethodBuilder,isQuoting);
              }
            }
            : wild_card_type {
              if isQuoting {
                accessMethodBuilder.append("? extends ");
              }
              else {
                accessMethodBuilder.append("+\"? extends ");
                isQuoting = true;
              }
              boolean isFirstExtendsType = true;
              any_type : type : type_var {
                if !isFirstExtendsType {
              	  if isQuoting {
                    accessMethodBuilder.append("|");
                  }
                  else {
                    accessMethodBuilder.append("+\"|");
                    isQuoting = true;
                  }
                }
                isQuoting = stringifyTypeVar(type,accessMethodBuilder,isQuoting);
                isFirstExtendsType = false;
              }
            }
          isFirstParameter = false;
        }
      }
      if isQuoting {
        accessMethodBuilder.append(">");
      }
      else {
        accessMethodBuilder.append("+\">");
        isQuoting = true;
      }
    }
    return isQuoting;
  }
> List<%Type> wild_card(%T input, boolean isInner, %Context parentContext){
    List<%Type> types = new ArrayList<%Type>();
    input->wild_card_type : type : type_var {
      types.add(type_var(type,isInner,parentContext));
    }
    return types;
  }
> %Type type_var(%T input, boolean isInner, %Context parentContext){
    %Type type = %Type();
    input : element : type_atom {
        type.add(type_atom(element,isInner,parentContext));
      }
      : template_parameters {
        element : quark : template_parameter { 
          if quark->all_type_name != null {
            type.template(all_type(quark,isInner,parentContext));
          }
          else {
            type.wild_card(wild_card(quark,isInner,parentContext));
          }
        }
      }
    return type;
  }
> %Type type_atom(%T input, boolean isInner, %Context parentContext){
    if input->statement_as_method != null {
      return %Type(body_gen.statement(input->statement_as_method->body_statement,true,parentContext).vibrate());
    }
    else if input->statement_as_string != null {
      return %Type(%String().set(body_gen.statement(input->statement_as_string->body_statement,true,parentContext)));
    }
    else if input->class != null {
      if input->class->class_variable_names != null {
        if isInner {
          return %Type(
             %Call().add(
              %Exact('input->class->class_variable_names'))
             .add(%E("getFullName"),%A()));
        }
        else {
          return %Type('input->class->class_variable_names');
        }
      }
      else {
        return %Type('input->class->class_names');
      }
    }
    else {
      return null;
    }
  }
> %Type all_type(%T input, Boolean isInner, %Context parentContext){
	if input->non_class_name != null {
	  String elementName = 'input->>non_class_name.get(0).getAll().get(0).getName()'.substring(1);
	  if elementName.startsWith("O") {
	    return %Type(%Exact("com.rem.lang.helpers.output."+elementName));
	  }
	  else if elementName.startsWith("Callable") {
	    return %Type(%Exact("com.rem.lang.helpers.output.CallableOutput"));
	  }
	  else if elementName.startsWith("Lineable") {
	    return %Type(%Exact("com.rem.lang.helpers.output.LineableOutput"));
	  }
	  else if elementName.startsWith("InputStructureBuilder") {
	    return %Type(%Exact("com.rem.lang.helpers.input.InputStructureBuilder"));
	  }
	  else {
	    if elementName.equals("Id") {
	      return %Type(%Exact("com.rem.gen.parser.Token.Id"));
	    }
	    else if elementName.equals("Result") {
	      return %Type(%Exact("com.rem.gen.parser.Parser.Result"));
	    }
	    else if elementName.equals("Pass") {
	      return %Type(%Exact("com.rem.gen.parser.Parser.Result.Pass"));
	    }
	    else if elementName.equals("Fail") {
	      return %Type(%Exact("com.rem.gen.parser.Parser.Result.Fail"));
	    }
	    else {
	      return %Type(%Exact("com.rem.gen.parser."+elementName));
	    }
	  }
	}
	else if input->type_var!=null {
		return type_var(input->type_var,isInner,parentContext);
	}
	else {
		if input->all_type_name !=null{
			return all_type(input->all_type_name,isInner,parentContext);
		}
		else {
		  return null;
		}
	}
  }
}



> void setup(%Pass result){
    %Helper.setupPackageNames(
      "com.rem.lang.helpers.output",
      "com.rem.lang.helpers.output.OutputClassStructure");
    classwise.setup(result);
  }
> void generate(%Pass result){ classwise.generate(result); }