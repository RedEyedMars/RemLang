
> VariableGenerator variable = new VariableGenerator();
> class VariableGenerator {
  Set<String> definedVariableNames = new HashSet<String>();
  void addDefinedVariableName(%V definedVariable){
	definedVariableNames.add(definedVariable.getName().evaluate());
  }
  %V declaration(%T declaration, boolean mustInner, %Context parentContext){
  	return declaration(declaration, mustInner, false, parentContext);
  }
  %V declaration(%T declaration, boolean mustInner, boolean isInnerClass, %Context parentContext){
	Boolean isInner = mustInner || declaration->inner != null;
	
	%V newVariable = %V ();
	
	%Type type = classwise.all_type(declaration->typeName,isInner,parentContext);
	declaration : element : ARRAY_TYPE {
      type.array();
    }
    if declaration->INLINE_LIST != null {
      type.isInlineList();
    }
    if declaration->method_argument != null {
      newVariable.assign(body_gen.argument(declaration->method_argument,isInner,parentContext));
	}
    if declaration->isFinal != null {
	  newVariable.isFinal();
    }
    if declaration->static != null {
      newVariable.isStatic();
      newVariable.isPublic();
    }
    
	if declaration->variableName->NAME != null || isInner  {
	  newVariable.set(type, new %E('declaration->variableName'));
	}
	else {
	  newVariable.set(type, classwise.name_var(declaration->variableName->name_var,isInner,parentContext));
	}
	if isInnerClass {
	  newVariable.isStatic();
	}
	
	return newVariable;
  }	
  
  %Lineable assignment(%T input, Boolean isInner, %Context parentContext) {
	return |`classwise.name_var(input->name_var,isInner,parentContext)` = `body_gen.argument(input->method_argument,isInner,parentContext)`;|;
  }

}