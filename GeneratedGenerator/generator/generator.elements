
outline
	"package gen;\n\n"+
	"import java.io.*;\n"+
	"import java.util.*;\n"+
	"import com.rem.parser.*;\n"+
	"import com.rem.parser.generation.*;\n"+
	"import com.rem.parser.token.*;\n"+
	"import com.rem.parser.parser.*;\n"+
	"import gen.checks.*;\n"+
	"import gen.entries.*;\n"+
	"import gen.properties.*;\n"+
	"import lists.*;\n\n"+
	"public class " Class Name " extends " Extension " {\n" Contents "\n}"

typeAndName
	"" Type " " Name ""

variableDeclaration
	"" Type Name " " Variable Name " = " Assignment ";"

variablePrototype
	"" Type Name " " Variable Name ""

flowMain
	"\tpublic static void main(String[] args){\n"+
	"\t\tif(args.length==1){\n\t\t\tnew " Meta Name "Flow().parse(args[0]);\n\t\t}\n\t\telse {\n\t\t\tSystem.err.println(\"No filename provided!\");\n\t\t}\n\t}\n"

generatorCall
	"Generators." Generator Name ""

generatorMethodCall
	"Generators." Generator Name "." Method ""

generatorDeclaration
	"" Class Name "Generator " Class name " = new " Assignment "Generator();"

generatorListDeclaration
	"Generator[] _ = new Generator[]{" Generator Names "};"
methodCall
	"" Subject Name "." Method Name "(" Parameters ")"
generatorElement
	"" Generator Name "Generator." Element Name "Element"
generatorElementWithVariable
	"Generators." Generator Name "," Variable Name ""
castCall
	"(" Type Name ")" Subject ""
exactCall
	"" Method Name ""
exactDuoCall
	"" First "" Second ""
exactWithAngleCall
	"" Method Name "<" Parameters ">"
newObjectCall
	"new " Type Name "(" Parameters ")"
newMethodWithBracesCall
	"new "	Type Name "<" Parameters ">()"
operatorCall
	"" Left " " Operator " " Right ""
noSubjectCall
	"" Method Name "(" Parameter ")"
errorCall
	"System.err.println(" Error Output ");"
returnCall
	"return " Output ";"
newBooleanCall
	"(" Parameters ")"
setCall
	"" Subject " = " Argument ";"
equalsCall
	"" Subject ".equals(" Argument ")"
notEqualsCall
	"!" Subject ".equals(" Argument ")"
newStringListCall
	"new String[]{" Parameters "}"
staticGetVariableCall
	"" Class Name "." Variable Name "" Blank ""
staticMethodCall
	"" Class Name "." Method Name "(" Parameters ")"
ifStatementCall
	"if(" Boolean "){" Body ""
elseIfStatementCall
	"else if(" Boolean "){" Body ""
elseStatementCall
	"else {" Body ""
forStatementCall
	"for(" Key Name ":" Token Name "){" Body ""
forNumberStatementCall
	"for(" Initialization "" Left "<" Right ";++" Iterate "){" Body ""
tokenForStatementCall
	"for(IToken.Key " Key Name ":" Token Name ".keySet()){" Body ""
methodDeclaration
	"public " Method Type " " Method Name "(" Method Parameters "){" Body "\n\t}"
getMethodDeclaration
	"public " Method Type " get" Variable Name "(){\n\t\treturn " Member Name ";\n\t}"
constructor
	"\tpublic " Class Name "Generator(){" Constructor Body "\n\t}"
publicStaticFinalVariableDeclaration
	"public static final " Type " " Name " = " Assignement ";"
semicoloned
	"" Body ";"