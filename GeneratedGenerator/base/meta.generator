uses Listnames Rules Tokens Base NameParser RegexParser
meta base
	var lazyNameParser as RegexParser
		static Tokens LISTNAME
	var rules as List<IParser>
		static Rules parser
	var listnames as List<IParser>
		static Listnames parser
	var rootParser as IParser
		static Rules base
	
	assignListElementNames takes
			context as ParseContext
			root as IToken
		var list_rules as ParseList
			context getList
				"list_rules"
		token new_list_rules
			list_rules getNewTokens
		
		new_list_rules * to new_list_def
			var listName
				'new_list_def -> listname
			set listName
				listName replaceAll
					"[ \\t]+"
					""
			var listSingle
				listName
			var indexOfDash
				listName indexOf
					"-"
			if indexOfDash > -1
				var oldList as ParseList
					context getList
						listName
				if oldList is not null
					context removeList
						oldList
				
				set listSingle
					listName substring
						0
						indexOfDash
				set listName
					this buildString
						listSingle
						listName substring
							indexOfDash+1
							listName length
				if oldList is not null
					context addList
						oldList
			context addList
				listName						
			var listVar as ParseList
				context getList
					listName
			var listNameParser as NameParser
				listVar getNamesParser
			new_list_def list_def to def
				var name
					'def -> parameters -> name
				listNameParser addName
					name
		var listRuless as ParseList
			context getList
				"list_rules"
		var listRulessNamesParser as NameParser
			listRuless getNamesParser
		listRulessNamesParser clear
		var customDeclarations as ParseList
			context getList
				"rules"
		if customDeclarations is not null
			context addList
				"rules"
			var customList as ParseList
				context getList
					"rules"
			var customNameParser as NameParser
				customList getNamesParser
			token customTokens
				customDeclarations getNewTokens
			customTokens custom_declaration to customToken 
				customNameParser addName
					'customToken->custom_definition->name

base
	
	var directory as File
		null
	var seedName
		null
	aux setup takes data as ParseContext
		var fileName
			data getFileName
		var indexOfDot
			fileName lastIndexOf
				"."
		if indexOfDot > -1
			set fileName
				fileName substring
					0
					indexOfDot
		set seedName
			fileName
		set directory
			new File
				base buildString
					"../Generated"
					base camelize
						fileName
					"/src/"
		directory mkdirs
