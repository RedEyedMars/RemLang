

entry man_obj uses innerable importable contextualizable
	entry className = null
	entry methodName = null
	entry parameters = null
	constructor takes iClassName as Entry, iMethodName, iParameters as ListEntry
		set importPackage = import:;
		set isInner = true
		set className = iClassName
		set methodName = \iMethodName
		set parameters = iParameters
		parameters setDelimiter :",";
	output
			(tabs internal manipulateObject{className methodName parameters}) if className is not null
entry man_tok uses innerable importable contextualizable
	entry subject = null
	entry body = null
	var tokenName
	var elementName
	var tabs = 0
	constructor takes iSubject as Entry, iTokenName, iElementName, iBody as ListEntry, iContext as context
		set importPackage = import:;
		set isInner = true
		set subject = iSubject
		var subjectAsImportable as importable = iSubject
		this setImport
			subjectAsImportable getImportPackage
		set tokenName = iTokenName
		set elementName = iElementName
		set context = iContext
		var importList = []
		var bodyContext = context:iContext;
		var semicolon = ";"
		set body = {}
		each e as Entry in iBody
			var i as importable = e
			var c as contextualizable = e
			c setContext
				bodyContext
			importList+=
				i getImportPackage
			body +=	e
		body setDelimiter :"";
		this setImport
			importList
	output
			(tabs internal manipulateToken{\elementName subject \tokenName body}) if context is not null
			+
			(tabs \"}") if context is not null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
entry i_exact uses innerable importable
	entry value = null
	constructor takes iValue as Entry
		set importPackage = import:;
		set value = iValue
		set isInner = true
	setValue takes newValue
		set value = newValue
	output
			value if value is not null
entry i_name_var uses innerable importable
	entry first = null
	entry second = null
	var isConcat = false
	constructor takes iValue as Entry
		set importPackage = import:;
		set first = iValue
		set isInner = true
	constructor takes iFirst as Entry, iSecond as Entry
		set importPackage = import:;
		set first = iFirst
		set second = iSecond
		set isInner = true
	constructor takes iFirst as Entry, concat, iSecond as Entry
		set importPackage = import:;
		set first = iFirst
		set second = iSecond
		set isConcat = true
		set isInner = true
	output
			first if second is null
			classwise concat{first second} if second is not null and isConcat is true
			classwise access{first second} if second is not null and isConcat is false
entry i_type_var uses innerable importable canAddSubClass variablizable
	entry sansTemp = {}
	entry first = null
	entry second = null
	var isConcat = false
	entry templateParameters = {}
	constructor
		set isInner = true
		set importPackage = import:;
		set first = {}
		first setDelimiter :".";
		sansTemp setDelimiter :".";
	constructor takes iValue as Entry
		set isInner = true
		set importPackage = import:;
		set first = {iValue}
		set sansTemp = {iValue}
		first setDelimiter :".";
		sansTemp setDelimiter :".";
	constructor takes iValue as Entry, iTemplateParameters as ListEntry, importType as importable
		set isInner = true
		set importPackage = import:;
		set first = {iValue}
		set sansTemp = {iValue}
		this setImport
			importType getImportPackage
		set templateParameters = iTemplateParameters
		
		first setDelimiter :".";
		sansTemp setDelimiter :".";
		
	constructor takes iFirst as Entry, operator, iSecond as Entry
		set isInner = true
		set importPackage = import:;
		entry importList = []
		var firstAsImportable as importable = iFirst
		var secondAsImportable as importable = iSecond
		importList+=
			firstAsImportable getImportPackage
		importList+=
			secondAsImportable getImportPackage
		this setImport
			importList
		set first = {iFirst}
		set sansTemp = {iFirst}
		set second = iSecond
		if operator is "+"
			set isConcat = true
		else
			set isConcat = false
		first setDelimiter :".";
		sansTemp setDelimiter :".";
	addSubClass takes newSubType as Entry
		var newTypeVar as i_type_var = newSubType
		sansTemp +=
			newTypeVar getSansTemp
		var builder
			new StringBuilder
		sansTemp get
			builder
		var importType as importable
			classwise getType
				'builder
		this setImport
			importType getImportPackage
		first += newSubType
	output
			internal bodyName{first} if second is null and templateParameters is empty and isVariable is false
			internal bodyName{classwise classAsVariable {first} } if second is null and templateParameters is empty and isVariable is true
			internal bodyName{classwise concat{first second}} if second is not null and isConcat is true and templateParameters is empty
			internal bodyName{classwise accessClass{classwise classAsVariable{first} second}} if second is not null and isConcat is false and templateParameters is empty
			internal bodyNameWithParameters{first templateParameters} if second is null and templateParameters is not empty
			internal bodyNameWithParameters{classwise concat{first second} templateParameters} if second is not null and isConcat is true and templateParameters is not empty
			internal bodyNameWithParameters{classwise accessClass{first second} templateParameters} if second is not null and isConcat is false and templateParameters is not empty

entry i_operator uses innerable importable
	entry left = null
	entry right = null
	entry operator = null
	constructor takes iLeft as Entry
		set importPackage = import:;
		set isInner = true
		set left = iLeft
		var leftAsImportable as importable = iLeft
		this setImport
			leftAsImportable getImportPackage
	constructor takes iLeft as Entry, iOperator, iRight as Entry
		set importPackage = import:;
		set isInner = true
		set left = iLeft
		set right = iRight
		set operator = \iOperator
		var leftAsImportable as importable = iLeft
		var rightAsImportable as importable = iRight
		var importList = []
		importList+=
			leftAsImportable getImportPackage
		importList+=
			rightAsImportable getImportPackage
		this setImport
			importList
	output
			internal bodyEntry{left} if right is null
			internal bodyOperator{left operator right} if right is not null
entry i_call uses innerable importable
	entry subject = null
	entry methodName = null
	entry parameters = null
	constructor takes iMethodName as Entry, iParameters as ListEntry
		set importPackage = import:;
		set isInner = true
		set methodName = iMethodName
		set parameters = iParameters
		var importList = []
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		this setImport
			importList
		parameters setDelimiter :",";
	constructor takes iSubject as Entry, iMethodName as Entry, iParameters as ListEntry
		set importPackage = import:;
		set subject = iSubject
		var subjectAsImportable as importable = iSubject
		set methodName = iMethodName
		set parameters = iParameters
		var importList = []
		importList+=
			subjectAsImportable getImportPackage
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		this setImport
			importList
		parameters setDelimiter :",";
	constructor takes iMethodName as Entry
		set importPackage = import:;
		set methodName = iMethodName
		var subjectAsImporable as importable = iMethodName
		var importList = []
		importList+=
			subjectAsImporable getImportPackage
		this setImport
			importList
	constructor takes iSubject as Entry, iMethodName as Entry
		set importPackage = import:;
		set subject = iSubject
		var subjectAsImporable as importable = iSubject
		set methodName = iMethodName
		var importList = []
		importList+=
			subjectAsImporable getImportPackage
		this setImport
			importList
	output
			internal bodyCallWithoutSubject{methodName parameters} if subject is null and parameters is not null
			internal bodyCallWithSubject{subject methodName parameters} if subject is not null and parameters is not null
			internal bodyAccessWithoutSubject{methodName} if subject is null and parameters is null
			internal bodyAccessWithSubject{subject methodName} if subject is not null and parameters is null
entry i_new_obj uses innerable importable
	entry className = null
	entry parameters = null
	constructor takes iClassName as Entry, iParameters as ListEntry
		set importPackage = import:;
		set isInner = true
		set className = iClassName
		set parameters = iParameters
		var importList = []
		var classNameAsImportable as importable = className
		importList+=
			classNameAsImportable getImportPackage
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		this setImport
			importList
		parameters setDelimiter :",";
	output
			internal bodyNewObj{className parameters} if className is not null
entry i_conditional uses innerable importable contextualizable
	entry name = null
	entry header = null
	entry body = null
	constructor takes iName, iHeader as Entry, iBody as ListEntry, iContext as context
		set importPackage = import:;
		set isInner = true
		set name = \iName
		set header = iHeader
		
		set body = {}
		set context = iContext
		entry importList = []
		if header is not null
			var headerAsImportable as importable = iHeader
			importList+=
				headerAsImportable getImportPackage
		var bodyContext = context:iContext;
		var semicolon = ";"
		each e as Entry in iBody
			var i as importable = e
			var c as contextualizable = e
			c setContext
				bodyContext
			importList+=
				i getImportPackage
			body +=	e
		this setImport
			importList
		
		body setDelimiter :"";
	output
			(tabs internal bodyConditional{name header body }) if header is not null
			(tabs internal bodyConditionalWithoutHeader{name body}) if header is null 
			+
			(tabs \"}") if context is not null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
entry i_element uses innerable importable contextualizable
	entry prefix = null
	entry suffix = null
	entry value = null
	constructor takes iPrefix, iValue as Entry, iSuffix, iContext as context
		set importPackage = import:;
		set isInner = true
		set prefix = \iPrefix
		set suffix = \iSuffix
		set value = iValue
		set context = iContext
		var valueAsImportable as importable = iValue
		this setImport
			valueAsImportable getImportPackage
	output
			(tabs internal bodyElement{prefix value suffix}) if context is not null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
entry i_variable uses innerable importable nameable finalizable
	entry type = null
	entry assignment  = null
	entry importList = []
	constructor takes iType as Entry, iName as Entry, iAssignment as Entry
		set importPackage = import:;
		set isInner = true
		set name = iName
		set type  = iType
		this setAssignment
			iAssignment
		this setImport
			importList
	setAssignment takes newAssignment as Entry
		importList clear
		var typeAsImportable as importable  = type
		set assignment = newAssignment
		importList+=
			typeAsImportable getImportPackage
		if assignment is not null
			var assignmentAsImportable as importable = assignment
			importList+=
				assignmentAsImportable getImportPackage
	output
			internal declareVariableWithAssignment{ type name assignment} if assignment is not null
			internal declareVariableWithoutAssignmentNonFinal { type name} if assignment is null and isFinal is false 
			internal declareVariableWithoutAssignmentFinal { type name} if assignment is null  and isFinal is true
entry i_method uses innerable importable contextualizable nameable staticable
	entry type = null
	entry parameters  = null
	entry methodBody = null
	constructor takes iType as Entry, iName as Entry, iParameters as ListEntry, iMethodBody as ListEntry, iContext as context
		set importPackage = import:;
		set isInner = true
		set name = iName
		set type = iType
		var typeAsImportable as importable = iType
		set parameters = iParameters
		set methodBody = {}
		set context = iContext
		entry importList = []
		importList+=
			typeAsImportable getImportPackage
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
			var f as finalizable = e
			f setIsFinal
				true
		var methodBodyContext = context:iContext;
		var semicolon = ";"
		each e as Entry in iMethodBody
			var i as importable = e
			var c as contextualizable = e
			c setContext
				methodBodyContext
			importList+=
				i getImportPackage
			methodBody += e
		parameters setDelimiter :",";
		methodBody setDelimiter :"";
		this setImport
			importList
	output
			(tabs internal declareMethod{asStatic type name parameters methodBody }) if context is not null
			+
			(tabs \"}") if context is not null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;

entry i_class uses innerable nameable importable contextualizable fileable staticable
	entry packageName = null
	entry importList = [(0 \"import com.rem.parser.generation.*;") (0 \"import clent.*;") (0 \"import java.util.*;") (0 \"import java.io.File;")]
	entry classType = null
	var parent as Entry = null
	var interfaces as Entry = null
	entry internalVariables = {}
	entry externalVariables = {}
	entry internalMethods = {}
	entry externalMethods = {}
	entry internalSubClasses = {}
	entry externalSubClasses = {}
	var isSubClass = false
	var hasOutput = false
	constructor takes iPackageName as Entry, iType, iName as Entry, iParent as Entry, iInterfaces as ListEntry, iVariables as ListEntry, iMethods as ListEntry, iContext as context
		set isInner = false
		set packageName = iPackageName
		set name = iName
		completeName += name
		completeName setDelimiter :".";
		var establishedImportable as importable
			classwise getType
				this getFullName
		set importPackage
			establishedImportable getImportPackage
		set externalImportList
			establishedImportable getExternalImportList
		importPackage setPackage
			packageName
		importPackage setName
			iName
		set classType = \iType
		if iParent is not null
			set parent = classwise extends{iParent}
			var iParentType as importable = iParent
			externalImportList +=
				iParentType getImportPackage
		else
			set parent = {}
		if iInterfaces is not empty
			set interfaces = classwise implements{iInterfaces}
			each itrf as Entry in iInterfaces
				var iIntefaceType as importable = itrf
				externalImportList +=
					iIntefaceType getImportPackage
		else
			set interfaces = {}
		
		each e as Entry in iVariables
			var i as innerable = e
			if i does getIsInner
				var niv as i_variable = e
				this addVariable
					niv
			else
				var nev as e_variable = e
				this addVariable
					nev
		each e as Entry in iMethods
			var i as innerable = e
			if i does getIsInner
				var niv as i_method = e
				this addMethod
					niv
			else
				var nev as i_method = e
				this addMethod
					nev
		set context = iContext
		importList setDelimiter :"";
		internalVariables setDelimiter :"";
		externalVariables setDelimiter :"";
		internalMethods setDelimiter :"";
		externalMethods setDelimiter :"";
		internalSubClasses setDelimiter :"";
		externalSubClasses setDelimiter :"";
	getFullName
		var builder
			new StringBuilder
		completeName get
			builder
		return
			'builder
	addVariable takes i as i_variable
		var semicolon = ";"
		var variableContext = context:context;
		internalVariables+=i_element:"protected " i semicolon variableContext;
		var iImport as Entry
			i getImportPackage
		importList +=
			(0 |iImport|)
		var iAssignment as Entry
			i getAssignment
		var iType as Entry
			i getType
		var iName as Entry
			i getName
		var cBuilder
			new StringBuilder
		iName get
			cBuilder
		if iAssignment is null
			i setAssignment
				i_new_obj:iType {};
		this addMethod
			i_method:iType i_exact:internal getMethodName{\^cBuilder}; {} {i_element:"return " iName semicolon context:;;} context:context:;;;
	addVariable takes e as e_variable
		var eImport as Entry
			e getImportPackage
		importList +=
			(0 |eImport|)
		var eName as Entry
			e getName
		var eAssignment as Entry
			e getAssignment
		if eAssignment is null
			var eType as Entry
				e getType
			e setAssignment
				e_new_obj:eType {};
		externalVariables+=(2 internal declareMemberVariable{eName external declareMember{e_tabs e}})
		externalImportList+=
			e getImportPackage
	addMethod takes i as i_method
		internalMethods+= i
		var iImport as Entry
			i getImportPackage
		importList +=
			(0 |iImport|)
	addMethod takes e as e_method
		var eImport as Entry
			e getImportPackage
		importList +=
			(0 |eImport|)
		var eName as Entry
			e getName
		externalMethods += (1 internal declareMemberMethod{eName e})
		externalImportList+=
			e getImportPackage
	addSubClass takes i as i_class
		internalSubClasses+=(1 |i|)
		i setIsSubClass :completeName true;
		var theirContext as context
			i getContext
		importList+=
			i getImportList
		theirContext setParentContext:context;
	addSubClass takes e as e_class
		var eName as Entry
			e getName
		var eAsFile as Entry
			e getAsFile
		externalSubClasses+=(1 internal declareMemberClass{eName eName eAsFile})
		externalImportList+=
			e getImportPackage
		e setIsSubClass : completeName true;
		var theirContext as context
			e getContext
		theirContext setParentContext:context;
	addClass takes e as e_class
		var eName as Entry
			e getName
		var eAsFile as Entry
			e getAsFile
		externalSubClasses+=(1 internal declareMemberClass{eName eName eAsFile})
		importList+=
			e getImportList
	setIsSubClass takes superCompleteName as Entry, newStatus as Boolean
		this setIsStatic
			newStatus
		set isSubClass
			newStatus
		completeName clear
		completeName += superCompleteName
		completeName += name
	output
			internal declareClass{packageName importList asStatic classType name parent interfaces externalVariables externalMethods externalSubClasses internalVariables internalMethods internalSubClasses } if isSubClass is false
			(tabs internal declareSubClass{asStatic classType name parent interfaces externalVariables externalMethods externalSubClasses internalVariables internalMethods internalSubClasses }) if isSubClass is true
			+
			(tabs \"}") if isSubClass is true
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab