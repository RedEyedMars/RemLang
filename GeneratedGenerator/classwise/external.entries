uses ElementEntry


entry e_name_var uses innerable importable
	entry first = null
	entry second = null
	var isConcat = false
	constructor takes iValue as Entry
		set first = iValue
	constructor takes iFirst as Entry, iSecond as Entry
		set first = iFirst
		set second = iSecond
	constructor takes iFirst as Entry, concat, iSecond as Entry
		set first = iFirst
		set second = iSecond
		set isConcat = true
	output
			external bodyName{first} if second is null
			external bodyName{classwise concat{first second}} if second is not null and isConcat is true
			external bodyName{classwise access{first second}} if second is not null and isConcat is false

entry e_operator uses innerable importable
	entry left = null
	entry right = null
	entry operator = null
	constructor takes iLeft as Entry
		set left = iLeft
		var leftAsImportable as importable = iLeft
		this setImport
			leftAsImportable getImportPackage
	constructor takes iLeft as Entry, iOperator, iRight as Entry
		set left as Entry = iLeft
		set right as Entry = iRight
		set operator = \iOperator
		var importList = []
		var leftAsImport as importable = iLeft
		var rightAsImport as importable = iRight
		importList+=
			leftAsImport getImportPackage
		importList+=
			rightAsImport getImportPackage
		this setImport
			importList
	output
			external bodyEntry{left} if right is null
			external bodyOperator{left operator right} if right is not null
entry e_call uses innerable importable
	entry subject = null
	entry methodName = null
	entry parameters = null
	constructor takes iMethodName as Entry, iParameters as ListEntry
		set methodName = iMethodName
		set parameters = iParameters
		var importList = []
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		this setImport
			importList
		parameters setDelimiter
			".get(builder);\n\t\t\t\t\tnew StringEntry(\",\").get(builder);\n\t\t\t\t\t"
	constructor takes iSubject as Entry, iMethodName as Entry, iParameters as ListEntry
		set subject = iSubject
		var subjectAsImporable as importable = iSubject
		set methodName = iMethodName
		set parameters = iParameters
		var importList = []
		importList+=
			subjectAsImporable getImportPackage
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		this setImport
			importList
		parameters setDelimiter 
			".get(builder);\n\t\t\t\t\tnew StringEntry(\",\").get(builder);\n\t\t\t\t\t"
	output
			external bodyCallWithoutSubject{methodName parameters} if subject is null
			external bodyCallWithSubject{subject methodName parameters} if subject is not null
entry e_new_obj uses innerable importable
	entry className = null
	entry parameters = null
	constructor takes iClassName as Entry, iParameters as ListEntry
		set className = iClassName
		set parameters = iParameters
		var importList = []
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		this setImport
			importList
		parameters setDelimiter 
			".get(builder);\n\t\t\t\t\tnew StringEntry(\",\").get(builder);\n\t\t\t\t\t"
	output
			external bodyNewObj{className parameters} if className is not null
entry e_conditional uses innerable importable
	entry name = null
	entry header = null
	entry conditionalBody = null
	entry context = null
	var tabs = 0
	entry e_tabs = \"0"
	constructor takes iName, iHeader as Entry, iBody as ListEntry, iContext as context
		set name = \iName
		set header = iHeader
		set conditionalBody = {}
		set context = iContext
		entry importList = []
		var headerAsImportable as importable = iHeader
		importList+=
			headerAsImportable getImportPackage
		var bodyContext = context:iContext;
		var semicolon = ";"
		each e as Entry in iBody
			var i as importable = e
			importList+=
				i getImportPackage
			conditionalBody +=	e_element:"" e semicolon bodyContext;
		this setImport
			importList
		
		conditionalBody setDelimiter
			".get(builder);"
	output
			(tabs external bodyConditional{e_tabs name header conditionalBody e_tabs}) if context is not null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
entry e_element uses innerable importable
	entry preffix = null
	entry suffix = null
	entry value = null
	entry context = null
	var tabs = 0
	entry e_tabs = \"0"
	constructor takes iPreffix, iValue as Entry, iSuffix, iContext as context
		set preffix = \iPreffix
		set suffix = \iSuffix
		set value = iValue
		set context = iContext
		var valueAsImportable as importable = iValue
		this setImport
			valueAsImportable getImportPackage
	output
			(tabs external bodyElement{e_tabs preffix value suffix}) if context is not null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
entry e_variable uses innerable nameable importable
	entry type = null
	entry assignment  = null
	var tabs = 0
	entry e_tabs = \"0"
	constructor takes iType as Entry, iName, iAssignment as Entry
		set name = iName
		set type = iType
		var typeAsImportable as importable = iType
		set assignment = iAssignment
		set importPackage
			typeAsImportable getImportPackage
	output
			external declareVariableWithAssignment { type \name assignment} if assignment is not null
			external declareVariableWithoutAssignment { type \name } if assignment is null 

entry e_method uses innerable nameable importable
	entry type = null
	entry parameters  = null
	entry methodBody = null
	entry context = null
	var tabs = 0
	entry e_tabs = \"0"
	constructor takes iType as Entry, iName, iParameters as ListEntry, iMethodBody as ListEntry, iContext as context
		set name = iName
		set type = iType
		var typeAsImportable as importable = iType
		set parameters = iParameters
		set methodBody = {}
		set context = iContext
		entry importList = []
		importList+=
			typeAsImportable getImportPackage
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		var methodBodyContext = context:iContext;
		var semicolon = ";"
		each e as Entry in iMethodBody
			var i as importable = e
			importList+=
				i getImportPackage
			methodBody += e_element:"" e semicolon methodBodyContext;
		parameters setDelimiter
			".get(builder);\n\t\t\t\t\tnew StringEntry(\",\").get(builder);\n\t\t\t\t\t"
		methodBody setDelimiter
			".get(builder);\n\t\t\t\t\t"
		this setImport
			importList
	output
			external declareMethod{e_tabs type \name parameters methodBody e_tabs} if context is not null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
entry e_class uses innerable nameable importable
	entry packageName = null
	entry asStatic = \""
	entry completeName = null
	entry asFile = null
	entry importList = [(0 \"import com.rem.parser.generation.*")]
	entry externalImportList = []
	entry classType = null
	var parent as Entry = null
	var interfaces as Entry = null
	entry internalVariables = {}
	entry externalVariables = {}
	entry internalMethods = {}
	entry externalMethods = {}
	entry internalSubClasses = {}
	entry externalSubClasses = {}
	entry externalConstructorVariables = {}
	entry externalConstructorMethods = {}
	entry externalConstructorSubClass = {}
	entry getHeader = null
	entry context = null
	var isSubClass = false
	var tabs = 0
	entry e_tabs = \"0"
	var hasOutput = false
	constructor takes iPackageName as Entry, iType, iName, iParent, iInterfaces as ListEntry, iVariables as ListEntry, iMethods as ListEntry, iContext as context
		
		
		set isInner = false
		set packageName = iPackageName
		this setImport
			iPackageName
		var establishedImportable as importable
			classwise getType
				iName
		establishedImportable setImport
			importPackage
		set classType = \iType
		set name = iName
		set completeName = {\iName}
		completeName setDelimiter :".";
		if iParent is not null
			set parent = classwise extends{\iParent}
			var iParentType as importable
				classwise getType
					iParent
			externalImportList +=
				iParentType getImportPackage
		else
			set parent = {}
		if iInterfaces is not empty
			set interfaces = classwise implements{iInterfaces}
			each itrf as Entry in iInterfaces
				var iIntefaceType as importable
					classwise getType
						'itrf
				externalImportList +=
					iIntefaceType getImportPackage
		else
			set interfaces = {}
				
		each ev as Entry in iVariables
			var i as innerable = ev
			if i does getIsInner
				var niv as i_variable = ev
				this addVariable
					niv
			else
				var nev as e_variable = ev
				this addVariable
					nev
		each e as Entry in iMethods
			var i as innerable = e
			if i does getIsInner
				var niv as i_method = e
				this addMethod
					niv
			else
				var nev as i_method = e
				this addMethod
					nev
		set context = iContext
		importList setDelimiter :"";
		internalVariables setDelimiter :"";
		externalVariables setDelimiter :"";
		internalMethods setDelimiter :"";
		externalMethods setDelimiter :"";
		internalSubClasses setDelimiter :"";
		externalSubClasses setDelimiter :"";
		externalConstructorVariables setDelimiter :"";
		externalConstructorMethods setDelimiter :"";
		externalConstructorSubClass setDelimiter :"";
		
		set getHeader = i_exact:external getCompleteHeader{packageName importList asStatic classType \name parent interfaces};
		
		set asFile = i_exact:external declareClass{\name \name externalVariables externalMethods externalSubClasses \name externalConstructorVariables externalConstructorMethods externalConstructorSubClass getHeader external addTailBrace{e_tabs}};
	addVariable takes i as i_variable
		internalVariables+=(1 |i|)
	addVariable takes e as e_variable
		var eName
			classwise buildString
				e getName
				"Variable"
		externalVariables+=(2 internal declareMember{\eName external declareMember{e_tabs e}})
		externalConstructorVariables+=(3 external addMemberVariable{\eName \eName})
		externalImportList+=
			e getImportPackage
	addMethod takes i as i_method
		internalMethods+=(1 |i|)
	addMethod takes e as e_method
		var eName
			classwise buildString
				e getName
				"Method"
		externalMethods += (1 internal declareMember{\eName e})
		externalConstructorMethods+=(3 external addMemberMethod{\eName \eName})
		externalImportList+=
			e getImportPackage
	addSubClass takes i as i_class
		internalSubClasses+=(1 |i|)
		i setIsSubClass :completeName true;
		var theirContext as context
			i getContext
		theirContext setParentContext:context;
	addSubClass takes e as e_class
		var ePlainName
			e getName
		var eName
			classwise buildString
				e getName
				"Class"
		var eAsFile as Entry
			e getAsFile
		externalSubClasses+=(1 internal declareMemberClass{\eName eAsFile})
		externalConstructorSubClass+=(3 external addMemberSubClass{\ePlainName \eName})
		externalImportList+=
			e getImportPackage
		e setIsSubClass : completeName true;
		var theirContext as context
			e getContext
		theirContext setParentContext:context;
	setIsSubClass takes superCompleteName as Entry, newStatus
		set isSubClass = newStatus
		if isSubClass is true
			asStatic set :"static";
		else
			asStatic set :"";
		completeName clear
		completeName +=	superCompleteName
		completeName += \name
		
		getHeader setValue
			external getSubHeader{e_tabs asStatic classType \name parent interfaces}
	getFullName
		var builder
			new StringBuilder
		completeName get
			builder
		return
			'builder
	output
			classwise retrieveClass{completeName} if name is not null
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
