uses ElementEntry
entry e_entry uses innerable importable
	entry value = null
	constructor takes iValue as Entry
		set importPackage = import:;
		set value = iValue
		set isInner = true
	setValue takes newValue
		set value = newValue
	output
			external bodyEntry{value} if value is not null
entry e_exact uses innerable importable
	entry value = null
	constructor takes iValue as Entry
		set importPackage = import:;
		set value = iValue
		set isInner = true
	setValue takes newValue
		set value = newValue
	output
			external bodyExact{value} if value is not null
entry e_name_var uses innerable importable
	entry first = null
	entry second = null
	var isConcat = false
	constructor takes iValue as Entry
		set importPackage = import:;
		set first = iValue
	constructor takes iFirst as Entry, iSecond as Entry
		set importPackage = import:;
		set first = iFirst
		set second = iSecond
	constructor takes iFirst as Entry, concat, iSecond as Entry
		set importPackage = import:;
		set first = iFirst
		set second = iSecond
		set isConcat = true
	output
			external bodyName{first} if second is null
			external bodyName{classwise concat{first second}} if second is not null and isConcat is true
			external bodyName{classwise access{first second}} if second is not null and isConcat is false

entry e_type_var uses innerable importable canAddSubClass variablizable
	entry first = null
	entry second = null
	var isConcat = false
	entry templateParameters = {}
	constructor
		set importPackage = import:;
		set first = {}
		first setDelimiter :".";
	constructor takes iValue as Entry
		set importPackage = import:;
		set first = {iValue}
		first setDelimiter :".";
	constructor takes iValue as Entry, iTemplateParameters as ListEntry, importType as importable
		set importPackage = import:;
		set first = {iValue}
		set templateParameters = iTemplateParameters
		first setDelimiter :".";
		this setImport
			importType getImportPackage
		templateParameters setDelimiter
			".get(builder);\n\t\t\t\t\t"
	constructor takes iFirst as Entry, operator, iSecond as Entry
		set importPackage = import:;
		set first = {iFirst}
		set second = iSecond
		if operator is "+"
			set isConcat = true
		else
			set isConcat = false
		first setDelimiter :".";
	addSubClass takes newSubType as Entry
		first += newSubType
		var builder
			new StringBuilder
		first get
			builder
		var importType as importable
			classwise getType
				'builder
		this setImport
			importType getImportPackage
	output
			external bodyName{first} if second is null and templateParameters is empty and isVariable is false
			external bodyName{ classwise classAsVariable {first} } if second is null and templateParameters is empty and isVariable is true
			external bodyName{first} if second is null and templateParameters is empty
			external bodyName{classwise concat{first second}} if second is not null and isConcat is true and templateParameters is empty
			external bodyName{external access{first second}} if second is not null and isConcat is false and templateParameters is empty
			external bodyNameWithParameters{first templateParameters} if second is null and templateParameters is not empty
			external bodyNameWithParameters{classwise concat{first second} templateParameters} if second is not null and isConcat is true and templateParameters is not empty
			external bodyNameWithParameters{classwise accessClass{first second} templateParameters} if second is not null and isConcat is false and templateParameters is not empty

entry e_operator uses innerable importable
	entry left = null
	entry right = null
	entry operator = null
	constructor takes iLeft as Entry
		set importPackage = import:;
		set left = iLeft
		var leftAsImportable as importable = iLeft
		this setImport
			leftAsImportable getImportPackage
	constructor takes iLeft as Entry, iOperator, iRight as Entry
		set importPackage = import:;
		set left as Entry = iLeft
		set right as Entry = iRight
		set operator = \iOperator
		var importList = []
		var leftAsImport as importable = iLeft
		var rightAsImport as importable = iRight
		importList+=
			leftAsImport getImportPackage
		importList+=
			rightAsImport getImportPackage
		this setImport
			importList
	output
			external bodyName{left} if right is null
			external bodyOperator{left operator right} if right is not null
entry e_call uses innerable importable
	entry subject = null
	entry methodName = null
	entry parameters = null
	constructor takes iMethodName as Entry, iParameters as ListEntry
		set importPackage = import:;
		set methodName = iMethodName
		set parameters = iParameters
		var importList = []
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		this setImport
			importList
		parameters setDelimiter
			".get(builder);\n\t\t\t\t\tnew StringEntry(\",\").get(builder);\n\t\t\t\t\t"
	constructor takes iSubject as Entry, iMethodName as Entry, iParameters as ListEntry
		set importPackage = import:;
		set subject = iSubject
		var subjectAsImporable as importable = iSubject
		set methodName = iMethodName
		set parameters = iParameters
		var importList = []
		importList+=
			subjectAsImporable getImportPackage
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		this setImport
			importList
		parameters setDelimiter 
			".get(builder);\n\t\t\t\t\tnew StringEntry(\",\").get(builder);\n\t\t\t\t\t"
	constructor takes iMethodName as Entry
		set importPackage = import:;
		set methodName = iMethodName
		var importList = []
		this setImport
			importList
	constructor takes iSubject as Entry, iMethodName as Entry
		set importPackage = import:;
		set subject = iSubject
		var subjectAsImporable as importable = iSubject
		set methodName = iMethodName
		var importList = []
		importList+=
			subjectAsImporable getImportPackage
		this setImport
			importList
	output
			external bodyCallWithoutSubject{methodName parameters} if subject is null and parameters is not null
			external bodyCallWithSubject{subject methodName parameters} if subject is not null and parameters is not null
			external bodyAccessWithoutSubject{methodName} if subject is null and parameters is null
			external bodyAccessWithSubject{subject methodName} if subject is not null and parameters is null
entry e_new_obj uses innerable importable
	entry className = null
	entry parameters = null
	constructor takes iClassName as Entry, iParameters as ListEntry
		set importPackage = import:;
		set className = iClassName
		set parameters = iParameters
		var importList = []
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		this setImport
			importList
		parameters setDelimiter 
			".get(builder);\n\t\t\t\t\tnew StringEntry(\",\").get(builder);\n\t\t\t\t\t"
	output
			external bodyNewObj{className parameters} if className is not null
entry e_conditional uses innerable importable contextualizable
	entry name = null
	entry header = null
	entry conditionalBody = null
	constructor takes iName, iHeader as Entry, iBody as ListEntry, iContext as context
		set importPackage = import:;
		set name = \iName
		set header = iHeader
		set conditionalBody = {}
		set context = iContext
		entry importList = []
		if header is not null
			var headerAsImportable as importable = iHeader
			importList+=
				headerAsImportable getImportPackage
		var bodyContext = context:iContext;
		var semicolon = ";"
		each e as Entry in iBody
			var i as importable = e
			importList+=
				i getImportPackage
			conditionalBody +=	e_element:"" e semicolon bodyContext;
		this setImport
			importList
		
		conditionalBody setDelimiter
			".get(builder);"
	output
			(tabs external bodyConditional{name header external bodyBody{conditionalBody} }) if header is not null
			(tabs external bodyConditionalWithoutHeader{name external bodyBody{ conditionalBody} }) if header is null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
entry e_element uses innerable importable contextualizable
	entry preffix = null
	entry suffix = null
	entry value = null
	constructor takes iPreffix, iValue as Entry, iSuffix, iContext as context
		set importPackage = import:;
		set preffix = \iPreffix
		set suffix = \iSuffix
		set value = iValue
		set context = iContext
		var valueAsImportable as importable = iValue
		this setImport
			valueAsImportable getImportPackage
	output
			(tabs external bodyElement{preffix value suffix}) if context is not null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
entry e_variable uses innerable importable nameable finalizable
	entry type = null
	entry assignment  = null
	constructor takes iType as Entry, iName as Entry, iAssignment as Entry
		set importPackage = import:;
		set name = iName
		set type = iType
		var typeAsImportable as importable = iType
		set assignment = iAssignment
		set importPackage
			typeAsImportable getImportPackage
	setAssignment takes newAssignment as Entry
		set assignment = newAssignment
	output
			external declareVariableWithAssignment { type name assignment} if assignment is not null
			external declareVariableWithoutAssignmentNonFinal { type name } if assignment is null and isFinal is false
			external declareVariableWithoutAssignmentFinal { type name } if assignment is null and isFinal is true 

entry e_method uses innerable importable contextualizable nameable
	entry type = null
	entry parameters  = null
	entry methodBody = null
	constructor takes iType as Entry, iName as Entry, iParameters as ListEntry, iMethodBody as ListEntry, iContext as context
		set importPackage = import:;
		set name = iName
		set type = iType
		var typeAsImportable as importable = iType
		set parameters = iParameters
		set methodBody = {}
		set context = iContext
		entry importList = []
		importList+=
			typeAsImportable getImportPackage
		each e as Entry in iParameters
			var i as importable = e
			importList+=
				i getImportPackage
		var methodBodyContext = context:iContext;
		var semicolon = ";"
		each e as Entry in iMethodBody
			var i as importable = e
			importList+=
				i getImportPackage
			methodBody += e_element:"" e semicolon methodBodyContext;
		parameters setDelimiter
			".get(builder);\n/*PARAMETERS*/\t\t\tnew StringEntry(\",\").get(builder);\n//Parameters\t\t\t"
		methodBody setDelimiter
			",\n/*BODY*/\t\t\t\t"
		this setImport
			importList
	output
			external declareMethod{e_tabs type name external bodyParameters{parameters} external bodyBody{methodBody}} if context is not null 
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
entry e_class uses innerable nameable importable contextualizable fileable
	entry packageName = null
	entry asStatic = \""
	entry asFile = null
	entry asArgument = null
	entry importList = [(0 \"import com.rem.parser.generation.*;") (0 \"import clent.*;") (0 \"import java.util.*;")]
	entry classType = null
	var externalName as Entry = null
	var externalParent as Entry = null
	var externalInterfaces as Entry = null
	var parent as Entry = null
	var interfaces as Entry = null
	entry internalVariables = {}
	entry externalVariables = {}
	entry internalMethods = {}
	entry externalMethods = {}
	entry internalSubClasses = {}
	entry externalSubClasses = {}
	entry externalConstructorVariables = {}
	entry externalConstructorMethods = {}
	entry externalConstructorSubClass = {}
	entry getHeader = null
	var isSubClass = false
	var hasOutput = false
	constructor takes iPackageName as Entry, iType, sName, iName as Entry, iParent as Entry, iInterfaces as ListEntry, iVariables as ListEntry, iMethods as ListEntry, iContext as context
		set isInner = false
		set packageName = iPackageName
		set name = \sName
		set completeName = {\sName}
		var establishedImportable as importable
			classwise getType
				this getFullName
		set importPackage
			establishedImportable getImportPackage
		set externalImportList
			establishedImportable getExternalImportList
		importPackage setPackage
			packageName
		importPackage setName
			\sName
		set classType = \iType
		completeName setDelimiter :".";
		set externalName = external exact{iName}
		if iParent is not null
			set parent = classwise extends{iParent}
			set externalParent = external extends { iParent }
			var iParentType as importable = iParent
			externalImportList +=
				iParentType getExternalImportPackage
		else
			set parent = {}
			set externalParent = external exact{``""``}
		if iInterfaces is not empty
			set interfaces = classwise implements{iInterfaces}
			entry extItrf = {} 
			each itrf as Entry in iInterfaces
				var iIntefaceType as importable = itrf
				externalImportList +=
					iIntefaceType getExternalImportPackage
				extItrf += external exact{itrf}
			set externalInterfaces = external implements {extItrf}
			
		else
			set interfaces = {}
			set externalInterfaces = external exact{``""``}
		each ev as Entry in iVariables
			var i as innerable = ev
			if i does getIsInner
				var niv as i_variable = ev
				this addVariable
					niv
			else
				var nev as e_variable = ev
				this addVariable
					nev
		each e as Entry in iMethods
			var i as innerable = e
			if i does getIsInner
				var niv as i_method = e
				this addMethod
					niv
			else
				var nev as i_method = e
				this addMethod
					nev
		set context = iContext
		importList setDelimiter :"";
		internalVariables setDelimiter :"";
		externalVariables setDelimiter :"";
		internalMethods setDelimiter :"";
		externalMethods setDelimiter :"";
		internalSubClasses setDelimiter :"";
		externalSubClasses setDelimiter :"";
		externalConstructorVariables setDelimiter :",";
		externalConstructorMethods setDelimiter :",";
		externalConstructorSubClass setDelimiter :",";
		
		set getHeader = i_exact:(2 external getCompleteHeader{  asStatic classType externalName externalParent externalInterfaces});
		
		set asFile = i_exact:external declareClass{name name internalVariables internalMethods internalSubClasses name packageName externalImportList externalName getHeader externalConstructorVariables externalConstructorMethods externalConstructorSubClass };
		set asArgument = i_exact:external declareClassAsArgument{packageName externalImportList externalName getHeader externalConstructorVariables externalConstructorMethods externalConstructorSubClass};
	addVariable takes i as i_variable
		internalVariables+=(2 internal declareMemberComplete{i})
		importList+=
			i getImportPackage
		var iAssignment as Entry
			i getAssignment
		if iAssignment is null
			var iType as Entry
				i getType
			i setAssignment
				i_new_obj:iType {};
	addVariable takes e as e_variable
		var eName as Entry
			e getName
		var eAssignment as Entry
			e getAssignment
		if eAssignment is null
			var eType as Entry
				e getType
			e setAssignment
				e_new_obj:eType {};
		externalVariables+=(2 internal declareMemberClass{eName eName external declareMember{e_tabs e}})
		externalConstructorVariables+= e
		externalImportList+=
			e getExternalImportPackage
	addMethod takes i as i_method
		internalMethods+=(1 |i|)
		importList+=
			i getImportPackage
	addMethod takes e as e_method
		var eName as Entry
			e getName
		externalMethods += (1 internal declareMemberMethod{eName e})
		externalConstructorMethods+= e
		externalImportList+=
			e getExternalImportPackage
	addSubClass takes i as i_class
		internalSubClasses+=(1 |i|)
		i setIsSubClass :completeName true;
		var theirContext as context
			i getContext
		theirContext setParentContext:context;
		importList+=
			i getImportPackage
	addSubClass takes e as e_class
		var ePlainName as Entry
			e getName
		var eName
			classwise buildString
				e getName
				"Class"
		var eAsFile as Entry
			e getAsFile
		externalSubClasses+=(1 internal declareMemberClass{\eName \eName eAsFile})
		externalConstructorSubClass+= e
		externalImportList+=
			e getExternalImportPackage
		e setIsSubClass : completeName true;
		var theirContext as context
			e getContext
		theirContext setParentContext:context;
	setIsSubClass takes superCompleteName as Entry, newStatus
		set isSubClass = newStatus
		if isSubClass is true
			asStatic set :"static";
		else
			asStatic set :"";
		completeName clear
		completeName +=	superCompleteName
		completeName += name
		
		getHeader setValue
			(2 external getSubHeader{asStatic classType externalName externalParent externalInterfaces})
	output
			classwise retrieveClass{completeName} if name is not null
		if context is null
			set tabs = 0
		else
			set tabs
				context getTab
		e_tabs set :'tabs;
