

camelize
	"FlowController.camelize(" In ".toString())"
getMethodName
	"get" Name ""
getInternalMethodName
	"get_" Name ""
getVariableFromName
	"MainClass." VariableName ""
getClassFromClassMap
	"ExternalClassEntry.classMap.get(" Class Name ")"
newBody
	"new ExternalStatement.Body(" Body Elements ")"
manipulateObject
	"" Class Name "." Method "(" Parameter ");"

manipulateSoloToken
	"for(final IToken " Element Name ":" Subject ".getAllSafely(\"" Token Name "\")) {" Body ""
manipulateMultiToken
	"for(IToken.Key __" Element Name "__KEY:" Subject ".keySet()) {" Body ""
manipulateOneMultiToken
	"if(__" Element Name"__KEY.getName().equals(\"" Token Name"\")){ final IToken " Element Name " = " Subject ".get(__" Element Name "__KEY);" Body ""


bodyEntry
	"" Entry ""
bodyOperator
	"" Left " " Operator " " Right ""
bodyBracedStatement
	"(" Subject ")"
bodyBracedOperatorStatement
	"(" Subject ") " Operator " " Right ""
bodyCastedStatement
	"(" Left ") " Right ""
bodyCallWithSubjectWithArray
	"" Subject "." Method "(" Parameters ")[" Array "]"
bodyCallWithoutSubjectWithArray
	"" Method "(" Parameters ")[" Array "]" 
bodyAccessWithSubjectWithArray
	"" Subject "." Method "[" Array "]"
bodyAccessWithoutSubjectWithArray
	"" Method "[" Array "]"
bodyCallWithSubject
	"" Subject "." Method "(" Parameters ")"
bodyCallWithoutSubject
	"" Method "(" Parameters ")"
bodyAccessWithSubject
	"" Subject "." Method ""
bodyAccessWithoutSubject
	"" Method ""
bodyName
	"" Name ""
bodyForIntHeader
	"" Variable Declaration "; " VariableName " " Operator " " Variable Limit "; ++" Variable Name ""
bodyNameWithParameters
	"" Name "<" Parameters ">"
bodyNewObjPA
	"new " Method Name "(" Parameters ")[" Array "]"
bodyNewObjP
	"new " Method Name "(" Parameters ")"
bodyNewObjA
	"new " Method Name "[" Parameters "]"
bodyNewObj
	"new " Method Name ""
bodyConditional
	"" Name "(" Header ") {" Body ""
bodyConditionalWithoutHeader
	"" Name " {" Body ""
bodyElement
	"" Prefix "" Entry "" Suffix ""
declareVariableWithAssignmentFinal
	"final " Type "" Array " " Name " = " Assignment ""
declareVariableWithAssignmentNonFinal
	"" Type "" Array " " Name " = " Assignment ""
declareVariableWithoutAssignmentNonFinal
	"" Type "" Array " " Name ""
declareVariableWithoutAssignmentFinal
	"final " Type "" Array " " Name ""
declareStaticVariableWithAssignmentFinal
	"static final " Type "" Array " " Name " = " Assignment ""
declareStaticVariableWithAssignmentNonFinal
	"static " Type "" Array " " Name " = " Assignment ""
declareStaticVariableWithoutAssignmentNonFinal
	"static " Type "" Array " " Name ""
declareStaticVariableWithoutAssignmentFinal
	"static final "" Array " Type " " Name ""
declareMember
	"protected " Name And Type " = " Assignment ";"
declareMemberComplete
	"protected " Name And Type and Assignment ";"
declareMemberVariable
	"protected ExternalVariableEntry " Name "Variable = " Member ";"
declareMemberMethod
	"protected ExternalMethodEntry " Name "Method = " Member ";"
declareMemberClass
	"public final " Name " " Name "Class = " Member ""
declareStaticMemberClass
	"public static final " Name " " Name "Class = " Member ""
declareMethod
	"public " IsStatic "" Type "" Array " " Name "(" Parameters ") " Throws " {" Method Body ""
declareClass
	"package " Package name ";
import java.util.*;
import java.io.*;
import lists.*;
import com.rem.parser.generation.classwise.*;
import com.rem.parser.generation.*;
import com.rem.parser.parser.*;
import com.rem.parser.token.*;
import com.rem.parser.*;
" Imports "
public " IsStatic "" Class Type " " Class Name " " Extends " " Implements " {
	public static class classes {" Classes "
	}
	public static " Class Type " variables = null;
	public static " Class Type " methods = null;
	//Externals" Variables "\n" Methods "\n" Classes "
	//Internals" Variables "\n" Methods "\n" Classes "
}"


declareSubClass
	"public " IsStatic "" Class Type " " Class Name " " Extends " " Implements " {
	//Externals" Variables "\n" Methods "\n" Classes "
	//Internals" Variables "\n" Methods "\n" Classes ""