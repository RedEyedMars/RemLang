
exact
	"" In ""
returnCall
	"return " Statement ";"
throw
	"new RuntimeException(" Name Var ")"
semicoloned
	"" Statement ";"
asImport
	"import " Package "." Name ";"
asExternalImport
	"__BUILDER__.append(\"\\nimport \");" Package ".get(__BUILDER__);__BUILDER__.append(\".\");new StringEntry(" Name ").get(__BUILDER__);__BUILDER__.append(\";\");"
concat
	"" Left "+" Right ""
access
	"" Left ".get(" Right ")"
accessDefault
	"" Left "." Right ""
accessClass
	"" Left ".getSubClass(" Right ")"
accessMethod
	"" Left ".getMethod(" Right ")"
accessVariable
	"" Left ".getVariable(" Right ")"
classAsVariable
	"" Class Name "Class"
retrieveVariable
	"MainFlow.variables.get_" Variable Name "()"
retrieveMethod
	"MainFlow.methods." Method Name ""
retrieveClass
	"MainFlow.classes." Class Name "Class"
variableAsGlobal
	"__VAR__" Name ""
extends
	"extends " Parent Class ""
implements
	"implements " Parent Class ""
generators
	"new Generator[]{
		new Generator(){
			public String getName(){
				return \"Main\";
			}
			public void setup(ParseContext data){
			}
			public void generate(ParseContext data){
				StringBuilder __BUILDER__;
				File __DIRECTORY__;
				" Class Wise Add File "
				outputAll();
			}
			public void generateRoot(IToken rootToken){
			}
		}};
	}
	public static String __ROOT_DIRECTORY__ = \".\";
	@Override
	public void initializeFlowController(){
	  MainFlow.variables = this;
	  MainFlow.methods = this;
	}
	public void setup(String rootDirectory){
		__ROOT_DIRECTORY__ = rootDirectory;
		" Setup All classes "
	}
	public void output(ParseContext data){
		ExternalImportEntry.solidify();
		getGenerators()[0].generate(data);
		for(Generator gen:privateFiles){
			gen.outputAll();
		}
		System.out.println(\"Output Complete\")"
addFile
	"__BUILDER__ = new StringBuilder();
	" Package Name ".get(__BUILDER__);
	__DIRECTORY__ = new File(__ROOT_DIRECTORY__, __BUILDER__.toString().replace(\".\",\"/\"));
	__DIRECTORY__.mkdirs();
	addFile(__DIRECTORY__,FlowController.camelize(" Class Name ")+\".java\", MainFlow.classes." Class Name "Class);"
addFileInMethod
	"__BUILDER__ = new StringBuilder();
	" Package Name ".get(__BUILDER__);
	__DIRECTORY__ = new File(MainFlow.__ROOT_DIRECTORY__, __BUILDER__.toString().replace(\".\",\"/\"));
	__DIRECTORY__.mkdirs();
	MainFlow.methods.addFile(__DIRECTORY__,FlowController.camelize(" Class Name ")+\".java\", " Class Name "Class);"
setupClass
	"MainFlow.classes." Class Name "Class.__INIT__();"
addAnonymousClass
	"ExternalClassEntry.suppliment(\"" ClassName "\", \"" PackageName "\");"