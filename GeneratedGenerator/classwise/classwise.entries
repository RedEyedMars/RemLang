uses StringEntry

import "external.entries"
import "internal.entries"
property innerable
	var isInner = false
property fileable
	asFile as Entry
		return
			null
property nameable
	var name as Entry = \""
	var completeName as ListEntry = {}
	getFullName
		var builder
			new StringBuilder
		completeName get
			builder
		return
			'builder

property importable
	var importPackage as import = import:;
	var externalImportList = []
	getExternalImportPackage
		return
			e_import:importPackage;
	setImport takes newImport as Entry
		importPackage setParent
			newImport
property canAddSubClass
	addSubClass takes newSubClass as Entry
		var x = "x"
property contextualizable
	var context as context = null
	var tabs = 0
	var e_tabs as StringEntry = \"0"
	setContext takes newContext
		set context = newContext
property variablizable
	var isVariable = false
	setIsVariable takes newIsVariable as Boolean
		set isVariable = newIsVariable
property finalizable
	var isFinal = false
	setIsFinal takes newIsFinal as Boolean
		set isFinal = newIsFinal
property staticable
	var isStatic = false
	var asStatic = \""
	setIsStatic takes newIsStatic as Boolean
		set isStatic = newIsStatic
		if isStatic is true
			asStatic set :"static ";
		else
			asStatic set :"";
entry importHolder uses importable
	constructor
		var x = "x"
entry import
	entry myPackage = null
	entry myName = null
	entry myParent = null
	constructor
		set myParent = null
	setParent takes newImport as Entry
		set myParent = newImport
	setPackage takes newPackage as Entry
		set myPackage = newPackage
	setName takes newName as Entry
		set myName = newName
	getPackageName as Entry
		return
			myPackage
	output
			myParent if myParent is not null
			(0 classwise asImport{myPackage myName}) if myName is not null and myName is not "void" 
			{} otherwise
entry e_import
	entry myPackage = null
	entry myName = null
	entry myParent = null
	entry parentImport = null
	constructor takes originalImport as import
		set parentImport = originalImport
	output
			myParent if myParent is not null
			(0 classwise asExternalImport{myPackage myName}) if myName is not null and myName is not "void" 
			{} otherwise
		var parentsParent as import
			parentImport getMyParent
		if parentsParent is not null
			set myParent
				e_import:parentsParent;
		else
			set myPackage
				parentImport getMyPackage
			set myName
				parentImport getMyName
entry context
	var parentContext as context
	constructor takes iParent as context
		set parentContext = iParent
	constructor
		set parentContext = null
	getTab as Integer
		if parentContext is not null
			var tab
				parentContext getTab
			return
				tab+1
		else
			return
				0
	setParentContext takes newParent
		set parentContext = newParent
