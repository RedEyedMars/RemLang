
getName
	"new StringEntry(" Name Getter ".getFullName())"
accessClass
	"new ExternalStatement(\".\", " Left ", " Right ")"
accessMethod
	"new ExternalStatement(\".\", " Left ", " Right ")"
exact
	"new StringEntry(" In ")"
asTemplate
	"new StringEntry(\"<" In ">\")"
camelize
	"new StringEntry(Generator.camelize(" In "))"
extends
	"builder.append(\" extends \");
	" Extends Name ""
implements
	"builder.append(\" implements \");
	" Implements Name ""

bodyConcat
	"/*Concat*/new ExternalStatement(\"\", " Left ", " Right ")"
bodyName
	"/*Name*/new ExternalStatement(" Name ")"
bodyNameWithParameters
	"/*Name*/new ExternalStatement(new StringEntry(" Name "+\"<\"), new StringEntry(\">\"), \",\", " Parameters ")"
bodyInnerCall
	"/*InCl*/new ExternalStatement(" Name ")"
bodyExact
	"/*Exac*/new ExternalStatement(new StringEntry(\"" Name "\"))"
bodyExactWithParameters
	"/*Exac*/new ExternalStatement(new StringEntry(" Name "+\"<\"), new StringEntry(\">\"), \",\", " Parameters ")"
bodyQuote
	"/*Quot*/new ExternalStatement(new QuoteEntry(" Value "))"
bodyEntry
	"/*Enty*/new ExternalStatement(new StringEntry(" Value "))"
bodyOperator
	"/*Optr*/new ExternalStatement(" Operator ", " Left ", " Right ")"
bodyCallWithSubject
	"/*Call*/new ExternalStatement(){
					{
						add(" Subject ");
						set(\".\");
						add(" Method Name ");
						set(\"(\");
						add(new ExternalStatement.Parameters(" Parameters "));
						set(\").\");
						suffix = new StringEntry(\")\");
					}
				}"
bodyCallWithoutSubject
	"/*Call*/new ExternalStatement(null,new StringEntry(\")\"),\"(\"," Method Name ",new ExternalStatement.Parameters(" Parameters "))"
bodyAccessWithSubject
	"/*Acss*/new ExternalStatement(\".\", " Subject ", " Method Name ")"
bodyAccessWithoutSubject
	"/*Acss*/new ExternalStatement(" Method Name ")"
bodyNewObj
	"/*NObj*/new ExternalStatement(new StringEntry(\"new \"),new StringEntry(\")\"),\"(\"," Type Name ",new ExternalStatement.Parameters(" Parameters "))"
bodyElement
	"/*Elem*/new ExternalStatement(new TabEntry(new StringEntry(" Preffix ")), new StringEntry(" Suffix "), " Entry ")"

bodyConditional
	"/*Cond*/new ExternalStatement(
			new TabEntry(new StringEntry(\"" Name "(\")),
			new TabEntry(new StringEntry(\"}\")), 
			new ExternalStatement(null, new StringEntry(\")\"), " Header ")){
			ExternalStatement __BODY__;
			{
				__BODY__ = " Body ";
				super.add(__BODY__);
			}
			@Override
			public boolean add(ExternalStatement statement){
				return __BODY__.add(statement);
			}
		}"
bodyConditionalWithoutHeader
	"/*Cond*/new ExternalStatement(
			new TabEntry(new StringEntry(\"" Name "\")),
			new TabEntry(new StringEntry(\"}\"))){
			ExternalStatement __BODY__;
			{
				__BODY__ = " Body ";
				super.add(__BODY__);
			}
			@Override
			public boolean add(ExternalStatement statement){
				return __BODY__.add(statement);
			}
		}"
bodyParameters
	"/*Parameters*/Arrays.asList(new ExternalVariableEntry[]{" Body "})"
bodyBody
	"/*Body*/new ExternalStatement.Body(" Body ")"

declareMember
	"new Entry(){
				public void get(StringBuilder builder){
					new TabEntry(" Tabs ", new StringEntry("protected ")).get(builder);
					" Variable Declaration ".get(builder);
					builder.append(\";\");
				}
			}"


declareVariableAsInlineList
	"new ExternalVariableEntry(false, " Type ", new ExternalStatement(new StringEntry(\"...\"), " Name "))"
declareVariableWithAssignment
	"new ExternalVariableEntry(false, " Type ", " Name ", " Assignment ")"
declareVariableWithoutAssignmentNonFinal
	"new ExternalVariableEntry(false, " Type ", " Name ")"
declareVariableWithoutAssignmentFinal
	"new ExternalVariableEntry(false, " Type ", " Name ")"
declareStaticVariableWithAssignment
	"new ExternalVariableEntry(true, " Type ", " Name ", " Assignment ")"
declareStaticVariableWithoutAssignmentNonFinal
	"new ExternalVariableEntry(true, " Type ", " Name ")"
declareStaticVariableWithoutAssignmentFinal
	"new ExternalVariableEntry(true, " Type ", " Name ")"
declareMethod
	"new ExternalMethodEntry(" Tabs ", " Type ", " Name ", " Parameters ", " Body ")"

getCompleteHeader
	"new Entry(){
		public void get(StringBuilder builder){
			builder.append(\"public " IsStatic " " Class Type "\");
			" Class Name ".get(builder);
			" Template Name ".get(builder);
			builder.append(\" \");
			" Extends ".get(builder);
			builder.append(\" \");
			" Implements ".get(builder);
			builder.append(\" {\");
		}
	}"
getSubHeader
	"new Entry(){
		public void get(StringBuilder builder){
			builder.append(\"public " IsStatic " " Class Type "\");
			" Class Name ".get(builder);
			builder.append(\" \");
			" Extends ".get(builder);
			builder.append(\" \");
			" Implements ".get(builder);
			builder.append(\" {\");
		}
	}"
addTailBrace
	"new TabEntry(" Tabs ", new StringEntry(\"}\")).get(builder);"

declareClass
	"new " Name "();
	public class " Name " extends ExternalClassEntry {" Variables "\n" Methods "\n" Classes "\n" Classes "\n
	public void __INIT__(){
		super.__SETUP__(
		new Entry(){
			public void get(StringBuilder builder){"Package Name".get(builder);
			}
		}, 
		new Entry(){
			public void get(StringBuilder builder){" ImportList"
			}
		}, " Name ", " Header ", Arrays.asList(new ExternalVariableEntry[]{" Variables "}), Arrays.asList(new ExternalMethodEntry[]{" Methods "}), Arrays.asList(new ExternalClassEntry[]{" Classes "}));
	}
}"

declareClassAsArgument
	"new ExternalClassEntry(){public void __INIT__(){super.__SETUP__(new Entry(){
			public void get(StringBuilder builder){" Package Name".get(builder);
			}
		}, 
		new Entry(){
			public void get(StringBuilder builder){" ImportList"
			}
		}," Name ", " Header ", Arrays.asList(new ExternalVariableEntry[]{" Variables "}), Arrays.asList(new ExternalMethodEntry[]{" Methods "}), Arrays.asList(new ExternalClassEntry[]{" Classes "})) ;}}"



addMemberVariable
	"addVariable(\"" Name "\", " Entry ");"
addMemberMethod
	"addMethod(\"" Name "\", " Entry ");"
addMemberSubClass
	"addSubClass(\"" Name "\", " Entry ");"