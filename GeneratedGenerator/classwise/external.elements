
getName
	"new StringEntry(" Name Getter ".getFullName())"
accessClass
	"new ExternalStatement(\".\", " Left ", " Right ")"
accessMethod
	"new ExternalStatement(\".\", " Left ", " Right ")"

getClassFromClassMap
	"ExternalClassEntry.classMap.get(" Class Name ")"
exact
	"new StringEntry(" In ")"
exactEntry
	"new Entry(){
			public void get(StringBuilder __BUILDER__){" In ".get(__BUILDER__);
			}
		}"
asTemplate
	"new StringEntry(\"<" In ">\")"
camelize
	"new StringEntry(FlowController.camelize(" In "))"
extends
	"builder.append(\" extends \");
	" Extends Name ""
implements
	"builder.append(\" implements \");
	" Implements Name ""
asEntryList
	"new ArrayList<Entry>(Arrays.asList(new Entry[]{" Class List "}))"

bodyConcat
	"/*Concat*/new ExternalStatement(\"\", " Left ", " Right ")"
bodyName
	"/*Name*/new ExternalStatement(" Name ")"
bodyNameWithParameters
	"/*Name*/new ExternalStatement(new StringEntry(" Name "+\"<\"), new StringEntry(\">\"), \",\", " Parameters ")"
bodyTypeName
	"/*TypeName*/new ExternalStatement.TypeName(" Name ")"
bodyTypeNameWithParameters
	"/*TypeName*/new ExternalStatement.TypeName(" Name ", new ExternalStatement(new StringEntry(\"<\"), new StringEntry(\">\"), \",\", " Parameters "))"
bodyInnerCall
	"/*InCl*/new ExternalStatement(" Name ")"
bodyExact
	"/*Exac*/new ExternalStatement(new StringEntry(\"" Name "\"))"
bodyExactWithParameters
	"/*Exac*/new ExternalStatement(new StringEntry(" Name "+\"<\"), new StringEntry(\">\"), \",\", " Parameters ")"
bodyQuote
	"/*Quot*/new ExternalStatement(new QuoteEntry(" Value "))"
bodyEntry
	"/*Enty*/new ExternalStatement(new StringEntry(" Value "))"
bodyOperator
	"/*Optr*/new ExternalStatement(" Operator ", " Left ", " Right ")"
bodyForIntHeader
	"/*FIHd*/new ExternalStatement(\";\", " Variable Declaration ", new ExternalStatement(" Operator ", " Variable Name ", " Variable Limit "), new ExternalStatement(new StringEntry(\"++\"),\"\"," Variable Name "))"
bodyBracedStatement
	"/*Brac*/new ExternalStatement(new StringEntry(\"(\"),new StringEntry(\")\"),\"\", " Subject ")"
bodyCastedStatement
	"/*Cast*/new ExternalStatement(\"\",new ExternalStatement(new StringEntry(\"(\"),new StringEntry(\")\"),\"\", " Type "), " ToCast ")"
bodyCallWithSubjectWithArray
	"/*Call*/new ExternalStatement(\"\",
			 	new ExternalStatement(\".\", " Subject ", " Method Name "),
			 	new ExternalStatement(new StringEntry(\"(\"),new StringEntry(\")\"),\"\",
			 		new ExternalStatement.Parameters(" Parameters ")),
			 	new ExternalStatement.ArrayParameters(" Array "))"
bodyCallWithoutSubjectWithArray
	"/*Call*/new ExternalStatement(\"\"," Method Name ",
			 	new ExternalStatement(new StringEntry(\"(\"),new StringEntry(\")\"),\"\",
			 		new ExternalStatement.Parameters(" Parameters ")),
			 	new ExternalStatement.ArrayParameters(" Array "))"
bodyAccessWithSubjectWithArray
	"/*Acss*/new ExternalStatement(\".\", " Subject ", new ExternalStatement(\"\", " Method Name ", new ExternalStatement.ArrayParameters(" Array ")))"
bodyAccessWithoutSubjectWithArray
	"/*Acss*/new ExternalStatement(\"\", " Method Name ", new ExternalStatement.ArrayParameters(" Array "))"
bodyCallWithSubject
	"/*Call*/new ExternalStatement(\"\",
			 	new ExternalStatement(\".\", " Subject ", " Method Name "),
			 	new ExternalStatement(new StringEntry(\"(\"),new StringEntry(\")\"),\"\",
			 		new ExternalStatement.Parameters(" Parameters ")))"
bodyCallWithoutSubject
	"/*Call*/new ExternalStatement(null,new StringEntry(\")\"),\"(\"," Method Name ",new ExternalStatement.Parameters(" Parameters "))"
bodyAccessWithSubject
	"/*Acss*/new ExternalStatement(\".\", " Subject ", " Method Name ")"
bodyAccessWithoutSubject
	"/*Acss*/new ExternalStatement(" Method Name ")"
bodyNewObjPA
	"/*NObj*/new ExternalStatement.NewObject(" Type Name ",new ExternalStatement.Parameters(" Parameters "), new ExternalStatement.ArrayParameters(" Array "))"
bodyNewObjP
	"/*NObj*/new ExternalStatement.NewObject(" Type Name ",new ExternalStatement.Parameters(" Parameters "))"
bodyNewObjA
	"/*NObj*/new ExternalStatement.NewObject(" Type Name ",new ExternalStatement.ArrayParameters(" Parameters "))"
bodyNewObj
	"/*NObj*/new ExternalStatement.NewObject(" Type Name ")"
bodyElement
	"/*Elem*/new ExternalStatement(new TabEntry(new StringEntry(" Preffix ")), new StringEntry(" Suffix "), " Entry ")"
bodyThrow
	"/*Thrw*/new ExternalStatement(new TabEntry(new StringEntry(\"throw new RuntimeException(\\\"\")), new StringEntry(\"\\\");\"),\"\", " Name Var ")"

bodyCase
	"/*Case*/new ExternalStatement.Conditional(
			\"case \", 
			" Header ",
			" Body ").setBraces(\"\",\":\")"
bodyConditional
	"/*Cond*/new ExternalStatement.Conditional(
			\"" Name "\", 
			" Header ",
			" Body ")"
bodyConditionalWithoutHeader
	"/*Cond*/new ExternalStatement.Conditional(
			\"" Name "\", null,
			" Body ")"
bodyParameters
	"/*Parameters*/Arrays.asList(new ExternalVariableEntry[]{" Body "})"
bodyBody
	"/*Body*/new ExternalStatement.Body(" Body ")"

declareMember
	"new Entry(){
				public void get(StringBuilder builder){
					new TabEntry(" Tabs ", new StringEntry("protected ")).get(builder);
					" Variable Declaration ".get(builder);
					builder.append(\";\");
				}
			}"


declareVariableAsInlineList
	"new ExternalVariableEntry(false, " Type ",\"" Array "\", new ExternalStatement(new StringEntry(\"...\"), " Name "))"
declareVariableWithAssignmentFinal
	"new ExternalVariableEntry(false, " Type ",\"" Array "\", " Name ", " Assignment ")"
declareVariableWithAssignmentNonFinal
	"new ExternalVariableEntry(false, true, " Type ",\"" Array "\", " Name ", " Assignment ")"
declareVariableWithoutAssignmentNonFinal
	"new ExternalVariableEntry(false, true, " Type ",\"" Array "\", " Name ")"
declareVariableWithoutAssignmentFinal
	"new ExternalVariableEntry(false, " Type ",\"" Array "\", " Name ")"
declareStaticVariableWithAssignment
	"new ExternalVariableEntry(true, " Type ",\"" Array "\", " Name ", " Assignment ")"
declareStaticVariableWithoutAssignmentNonFinal
	"new ExternalVariableEntry(true, " Type ",\"" Array "\", " Name ")"
declareStaticVariableWithoutAssignmentFinal
	"new ExternalVariableEntry(true, " Type ",\"" Array "\", " Name ")"
declareStaticMethod
	"new ExternalMethodEntry(" Tabs ", true," Type ",\"" Array "\", " Name ", " Parameters ", " Body ")"
declareMethod
	"new ExternalMethodEntry(" Tabs ", false," Type ",\"" Array "\", " Name ", " Parameters ", " Body ")"
declareInterfaceMethod
	"new ExternalMethodEntry(" Tabs ", false, " Type ",\"" Array "\", " Name ", " Parameters ", null )"

getCompleteHeader
	"new Entry(){
		public void get(StringBuilder builder){
			builder.append(\"" Statickality " " Class Type "\");
			" Class Name ".get(builder);
			" Template Name ".get(builder);
		}
	}"
addTailBrace
	"new TabEntry(" Tabs ", new StringEntry(\"}\")).get(builder);"

declareClass
	"new " Name "();
	public class " Name " extends ExternalClassEntry {" Variables "\n" Methods "\n" Classes "\n" Classes "\n
	public void __INIT__(){
		super.__SETUP__(
		" Package Name ", 
		new Entry(){
			public void get(StringBuilder __BUILDER__){" ImportList"
			}
		}, " Name ", " isInterface ", " Parent Class ", " Interfaces ", " Header ", Arrays.asList(new ExternalVariableEntry[]{" Variables "}), Arrays.asList(new ExternalMethodEntry[]{" Methods "}), Arrays.asList(new ExternalClassEntry[]{" Classes "}));
	}
}"

declareClassAsArgument
	"new ExternalClassEntry(){public void __INIT__(){super.__SETUP__(" Package Name", 
		new Entry(){
			public void get(StringBuilder __BUILDER__){" ImportList"
			}
		}," Name ", " isInterface ", " Parent Class ", " Interfaces ", " Header ", Arrays.asList(new ExternalVariableEntry[]{" Variables "}), Arrays.asList(new ExternalMethodEntry[]{" Methods "}), Arrays.asList(new ExternalClassEntry[]{" Classes "})) ;}}"



addMemberVariable
	"addVariable(\"" Name "\", " Entry ");"
addMemberMethod
	"addMethod(\"" Name "\", " Entry ");"
addMemberSubClass
	"addSubClass(\"" Name "\", " Entry ");"