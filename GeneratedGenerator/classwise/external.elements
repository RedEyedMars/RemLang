
access
	"" Left ".get(builder);\n\t\t\t\tbuilder.append(\".\");\n\t\t\t\t" Right ""
exact
	"new StringEntry(" In ")"
camelize
	"new StringEntry(Generator.camelize(" In "))"
extends
	"builder.append(\" extends \");
	" Extends Name ""
implements
	"builder.append(\" implements \");
	" Implements Name ""

bodyName
	"/*Name*/new Entry(){
					public void get(StringBuilder builder){
						" Name ".get(builder);
					}
				}"
bodyNameWithParameters
	"/*Name*/new Entry(){
					public void get(StringBuilder builder){
						builder.append(" Name ");
						builder.append(\"<\");
						" Parameters ".get(builder);
						builder.append(\">\");
					}
				}"
bodyExact
	"/*Exac*/new Entry(){
					public void get(StringBuilder builder){
						builder.append(\"" Name "\");
					}
				}"
bodyExactWithParameters
	"/*Exat*/new Entry(){
					public void get(StringBuilder builder){
						builder.append(\"" Name "\");
						builder.append(\"<\");
						" Parameters ".get(builder);
						builder.append(\">\");
					}
				}"
bodyEntry
	"/*Enty*/new Entry(){
					public void get(StringBuilder builder){
						new StringEntry(" Value ").get(builder);
					}
				}"
bodyOperator
	"/*Optr*/new Entry(){
					public void get(StringBuilder builder){
						" Left ".get(builder);
						builder.append(" Operator ");
						" Right ".get(builder);
					}
				}"
bodyCallWithSubject
	"/*Call*/new Entry(){
					public void get(StringBuilder builder){
						" Subject ".get(builder);
						builder.append(\".\");
						" Method Name ".get(builder);
						builder.append(\"(\");
						" Parameters ".get(builder);
						builder.append(\")\");
					}
				}"
bodyCallWithoutSubject
	"/*Call*/new Entry(){
					public void get(StringBuilder builder){
						" Method Name ".get(builder);
						builder.append(\"(\");
						" Parameters ".get(builder);
						builder.append(\")\");
					}
				}"
bodyAccessWithSubject
	"/*Acss*/new Entry(){
					public void get(StringBuilder builder){
						" Subject ".get(builder);
						builder.append(\".\");
						" Method Name ".get(builder);
					}
				}"
bodyAccessWithoutSubject
	"/*Acss*/new Entry(){
					public void get(StringBuilder builder){
						" Method Name ".get(builder);
					}
				}"
bodyNewObj
	"/*NObj*/new Entry(){
				public void get(StringBuilder builder){
					builder.append(\"new \");
					" Class Name ".get(builder);
					" Parameters ".get(builder);
				}
			}"
bodyElement
	"/*Elem*/new ExternalBodyEntry(){
				public void get(StringBuilder builder){
					new TabEntry(tabs, new StringEntry(" Preffix ")).get(builder);
					" Entry ".get(builder);
					new StringEntry(" Suffix ").get(builder);
				}
			}"

bodyConditional
	"/*Cond*/new ExternalBodyEntry(){
				public void get(StringBuilder builder){
					new TabEntry(tabs, new StringEntry(\"" Name "(\")).get(builder);
					" Header ".get(builder);
					new String(\") {\").get(builder);
					List<ExternalBodyEntry> body = " Body ";
					for(int i=0;i<body.size();++i){
						body.get(i).setTabs(tabs+1);
						body.get(i).get(builder);
					}
					new TabEntry(tabs,new String(\"}\")).get(builder);
				}
			}"
bodyConditionalWithoutHeader
	"/*Cond*/new ExternalBodyEntry(){
				public void get(StringBuilder builder){
					new TabEntry(tabs, new StringEntry(\"" Name " {\")).get(builder);
					List<ExternalBodyEntry> body = " Body ";
					for(int i=0;i<body.size();++i){
						body.get(i).setTabs(tabs+1);
						body.get(i).get(builder);
					}
					new TabEntry(tabs,new String(\"}\")).get(builder);
				}
			}"
bodyParameters
	"/*Parameters*/Arrays.asList(new ExternalVariableEntry[]{" Body "})"
bodyBody
	"/*Body*/Arrays.asList(new ExternalBodyEntry[]{" Body "})"

declareMember
	"new Entry(){
				public void get(StringBuilder builder){
					new TabEntry(" Tabs ", new StringEntry("protected ")).get(builder);
					" Variable Declaration ".get(builder);
					builder.append(\";\");
				}
			}"

declareVariableWithAssignment
	"new ExternalVariableEntry(" Type ", " Name ", " Assignment ")"
declareVariableWithoutAssignmentNonFinal
	"new ExternalVariableEntry(" Type ", " Name ")"
declareVariableWithoutAssignmentFinal
	"new ExternalVariableEntry(" Type ", " Name ")"
declareMethod
	"new ExternalMethodEntry(" Tabs ", " Type ", " Name ", " Parameters ", " Body ")"

getCompleteHeader
	"new Entry(){
		public void get(StringBuilder builder){
			builder.append(\"public " IsStatic " " Class Type "\");
			" Class Name ".get(builder);
			builder.append(\" \");
			" Extends ".get(builder);
			builder.append(\" \");
			" Implements ".get(builder);
			builder.append(\" {\");
		}
	}"
getSubHeader
	"new Entry(){
		public void get(StringBuilder builder){
			builder.append(\"public " IsStatic " " Class Type "\");
			" Class Name ".get(builder);
			builder.append(\" \");
			" Extends ".get(builder);
			builder.append(\" \");
			" Implements ".get(builder);
			builder.append(\" {\");
		}
	}"
addTailBrace
	"new TabEntry(" Tabs ", new StringEntry(\"}\")).get(builder);"

declareClass
	"new " Name "();
	public class " Name " extends ExternalClassEntry {" Variables "\n" Methods "\n" Classes "\n
	public " Name "(){
		super(
		new Entry(){
			public void get(StringBuilder builder){"Package Name".get(builder);
			}
		}, 
		new Entry(){
			public void get(StringBuilder builder){" ImportList"
			}
		}, " Name ", " Header ", Arrays.asList(new ExternalVariableEntry[]{" Variables "}), Arrays.asList(new ExternalMethodEntry[]{" Methods "}), Arrays.asList(new ExternalClassEntry[]{" Classes "}));
	}
}"
declareClassAsArgument
	"new ExternalClassEntry(new Entry(){
			public void get(StringBuilder builder){" Package Name".get(builder);
			}
		}, 
		new Entry(){
			public void get(StringBuilder builder){" ImportList"
			}
		}," Name ", " Header ", Arrays.asList(new ExternalVariableEntry[]{" Variables "}), Arrays.asList(new ExternalMethodEntry[]{" Methods "}), Arrays.asList(new ExternalClassEntry[]{" Classes "}))"



addMemberVariable
	"addVariable(\"" Name "\", " Entry ");"
addMemberMethod
	"addMethod(\"" Name "\", " Entry ");"
addMemberSubClass
	"addSubClass(\"" Name "\", " Entry ");"