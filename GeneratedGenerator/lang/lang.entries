
property context
	var variables
		new HashMap<String,variable>
	var parentContext as context = null
	var contextClass as class = null
	var shouldReturn = false
	getType
		var ret as class		
		if contextClass is not null
			return as class
				contextClass
		if parentContext is not null
			set ret
				parentContext getType
		else
			set ret = null
		return
			ret
	getVariable takes variableName
		var ret as variable = null
		if variables does containsKey variableName			
			set ret = variables->variableName
		else
			if parentContext is not null
				set ret
					parentContext getVariable
						variableName
		return
			ret
	addVariable takes variableName
		if variables does not containsKey variableName
			variables put
				variableName
				variable:variableName;
	setVariable takes variableName, variable as variable
		variables put
			variableName
			variable
	setShouldReturn takes newShould
		set shouldReturn = newShould
	descend as class
		error
			"Sub-classes of IContext must Override descend"
entry class uses context executable
	var className = null
	var methods
		new HashMap<String,method>
	getMethod takes methodName
		var method as method
			methods->methodName
		if method is null
			error
				"Unable to find method:"
				methodName
				" in class:"
				className
		return
			method
	setMethod takes methodName, method as method
		methods put
			methodName
			method
	descend
		var ret as class = class:className contextClass;
		var vars as Set<String>
			variables keySet
		each key in vars
			ret setVariable
				key
				variables->key
		var mets as Set<String>
			methods keySet		
		each key in mets
			ret setMethod
				key
				methods->key
		return
			ret
	createChild takes newClassName
		var ret as class = class:newClassName;
		var vars as Set<String>
			variables keySet
		each key in vars
			ret setVariable
				key
				variables->key
		var mets as Set<String>
			methods keySet		
		each key in mets
			ret setMethod
				key
				methods->key
		return
			ret
	constructor takes initialName, actualClass as class
		set className
			classifier buildString
				initialName
				"$C"		
		set contextClass
			actualClass
	constructor takes initialName
		set className = initialName
		set contextClass
			this getSelf

property executable
	var body
		new ArrayList<executable>
	addToBody takes element as executable
		body += element
	execute as variable takes myContext as context
		var ret as variable = null
		each element in body
			var atom as executable = element
			set ret
				atom execute
					myContext
			if myContext does getShouldReturn
				myContext setShouldReturn
					false
				return
					ret
		return
			ret

entry setVariable uses executable
	var variableName
	var executor as executable
	constructor takes initialVariableName, initialExecutor as executable
		set variableName = initialVariableName
		set executor = initialExecutor
	execute takes context as context
		var ret as variable
			executor execute
				context
		var newVariable
			context getVariable
				variableName
		if newVariable is null
			set newVariable
				variable:variableName;
			context setVariable
				variableName
				newVariable
		if ret is not null
			newVariable setType
				ret getType
			newVariable setValue
				ret getValue
			
		return 
			newVariable
entry executeReturn uses executable
	var executor as executable
	constructor takes initialExecutor as executable
		set executor = initialExecutor
	execute takes context as context
		var ret as variable
			executor execute
				context
		context setShouldReturn
			true
		return
			ret

entry getVariable uses executable
	var variableName
	constructor takes initialVariableName
		set variableName = initialVariableName
	execute as variable takes context as context
		return
			context getVariable
				variableName
entry getData uses executable
	var value
	constructor takes initialValue
		set value = initialValue
	execute as variable takes context as context
		var ret as variable
			variable:"$DATA";
		ret setValue
			value
		return
			ret
entry setToNull uses executable
	var variableName
	constructor takes initialVariableName
		set variableName = initialVariableName
	execute takes context as context
		context setVariable
			variableName
			null
		var ret as variable = null
		return
			ret

entry callMethodFromSubject uses executable
	var subjectName
	var methodName
	var parameters as List<executable>
	var useSelf = false
	constructor takes initialSubjectName, initialMethodName, initialParameters
		set subjectName = initialSubjectName
		set methodName = initialMethodName
		set parameters = initialParameters
		if subjectName is not null and subjectName is "this"
			set useSelf = true
	constructor takes initialMethodName
		set methodName = initialMethodName
		set useSelf = true
	execute as variable takes context as context
		var useClass as class = null
		if useSelf is true
			set useClass
				context getType
		else
			var variable as variable			
				context getVariable
					subjectName
			set useClass
				variable getType
		var method as method
			useClass getMethod
				methodName
		return
			method executeMethod
				context
				context
				parameters


entry callMethodFromScope uses executable
	var scope as executable
	var methodName
	var parameters as List<executable>
	constructor takes initialScope as executable, initialMethodName, initialParameters
		set scope = initialScope
		set methodName = initialMethodName
		set parameters = initialParameters
	constructor takes initialMethodName
		set methodName = initialMethodName
	execute as variable takes context as context
		var useClass as class = null
		if scope is not null
			var variable as variable			
				scope execute
					context
			set useClass as class
				variable getType
		else
			set useClass as class
				classifier getDefaultContext
		var method as method
			useClass getMethod
				methodName
		return
			method executeMethod
				useClass
				context
				parameters

entry callConstructor uses executable
	var className
	var methodName
	var parameters as List<executable>
	constructor takes initialClassName, initialMethodName, initialParameters
		set className = initialClassName
		set methodName = initialMethodName	
		set parameters = initialParameters
	execute as variable takes context as context
		if className is null
			set className
				classifier getClassNameFromConstructor
					methodName
		var useClass as class
			classifier getType
				className
		var method as method
			useClass getMethod
				methodName
		var newClass as class
			useClass descend
		var variable as variable = variable:"$NEW";
		useClass execute
			newClass
		variable setType
			newClass
		newClass setVariable
			"this"
			variable	
		var numberOfParameters as Integer
			method getNumberOfParameters
		var parameterNames as List<String>
			method getParameterNames	
		each index in 0..numberOfParameters
			newClass setVariable
				parameterNames->index
				parameters->index execute
					context
		method execute
			newClass
		return
			variable

entry makeNewObject uses executable
	var className
	constructor takes initialClassName
		set className = initialClassName
	execute as variable takes context as context
		var useClass as class
			classifier getType
				className
		var variable as variable = variable:"$NEW";
		var newClass as class
			useClass descend
		useClass execute
			newClass
		variable setType
			newClass
		return
			variable


entry variable
	var variableName = null
	var value = null
	var type as class = null
	constructor takes initialName
		set variableName = initialName
	setType takes newType as class
		set type = newType
	setValue takes newValue
		set value = newValue
	getValue as String
		if value is not null
			return
				value			
		else
			var classValue as variable
				type getVariable
					"value"
			if classValue is null
				return
					null
			else
				return
					classValue getValue

entry method uses executable
	var systemMethodIndex = -1
	var methodName = null
	var parameterNames
		new ArrayList<String>
	var numberOfParameters = 0
	
	constructor takes system as system, methodName
		set systemMethodIndex
			system getMethodIndex
				methodName
	constructor
		set methodName = "$Hidden"
	constructor takes initialMethodName
		set methodName = initialMethodName
	constructor takes initialMethodName, initialParameterNames as List<String>
		set methodName = initialMethodName
		parameterNames addAll
			initialParameterNames
		set numberOfParameters
			parameterNames size
	executeMethod takes toContext as context, fromContext as context, parameters as List<executable>
		
		var newContext as context
			toContext descend
		each index in 0..numberOfParameters
			newContext setVariable
				parameterNames->index
				parameters->index execute
					fromContext
		if systemMethodIndex is not -1
			var ret as variable
				system:; handle
					systemMethodIndex
					newContext
			return
				ret
		return as variable
			this execute
				newContext
	addParameter takes newVariableName
		parameterNames+=newVariableName
		set numberOfParameters
			parameterNames size

entry system
	getMethodIndex takes methodName
		if methodName is "println"
			return
				0
		if methodName is "concat"
			return
				1
		return
			-1
	handle as variable takes methodIndex as Integer, context as context
		if methodIndex is 0
			var parameter as variable
				context getVariable
					"default"
			classifier println
				parameter getValue
			return
				parameter
		if methodIndex is 1
			var left as variable
				context getVariable
					"leftParameter"
			var right as variable
				context getVariable
					"rightParameter"
			var ret = variable:"$CONCAT";
			ret setValue
				classifier buildString
					left getValue
					right getValue
			return 
				ret
		return
			null