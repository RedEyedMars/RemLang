< Token  : \com.\rem.\crg.\parser;
> ClassGenerator classGenerator = new ClassGenerator();
> class ClassGenerator // {
> Set<String> definedClassNames = new HashSet<String>();
> void addDefinedClassName(String className){
	definedClassNames.add(className);
  }
> Integer classIndex = 0;
>~Integer addVariableIndex = 0;
>~Integer addMethodIndex = 0;
>~Integer addSubClassIndex = 0;

> Class declaration(Token declaration,Boolean mustInner, Context parentContext){
	Boolean isInner = declaration->"inner" != null || mustInner;
	Statement classPackageName = new Statement();
	classPackageName.set(".");
	
	Class newClass = new Class ();
	if declaration->"className"->"NAME" != null {
	  newClass.setName(new Statement (new StringEntry("\""\+'declaration->"className"'\+"\"")));
	}
	else {
	  newClass.setName(new Statement (new StringEntry ('declaration->"className"')));
	}
	for Token element: declaration.getAllSafely("packageName") {
	  NameVar nameVar = new NameVar();
	  classwise.name_var(element,nameVar,isInner,parentContext);
	  classPackageName.add(nameVar.getAsStatement());
	}
	newClass.setPackageName("");
	for Token element: declaration.getAllSafely("parentName") {
	  Type parentType = new Type ();
	  classwise.type_var(element->"type_var",parentType,isInner,parentContext);
	  newClass.setParentClass(parentType.getAsStatement());
	}
	for Token element: declaration.getAllSafely("interfaceName") {
	  Type interfaceType = new Type ();
	  classwise.type_var(element->"type_var",interfaceType,isInner,parentContext);
	  newClass.addImplementingInterface(interfaceType.getAsStatement());
	}
	for Token element: declaration.getAllSafely("variable_declaration") {
	  newClass.addVariable(variable.declaration(element,isInner,parentContext));
	}
	for Token element: declaration.getAllSafely("method_declaration") {
	  newClass.addMethod(method.declaration(element,isInner,parentContext));
	}
	for Token element: declaration.getAllSafely("class_declaration") {
	  newClass.addSubClass(classGenerator.declaration(element,isInner,parentContext));
	}
	newClass.setupContext();
	return newClass;
  }
}