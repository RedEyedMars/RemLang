< Token  : \com.\rem.\gen.\parser;
> ClassGenerator classGenerator = new ClassGenerator();
> class ClassGenerator // {
> Set<String> definedClassNames = new HashSet<String>();
> void addDefinedClassName(String className){
	definedClassNames.add(className);
  }
> Boolean hasDefinedClassName(String className){
    return definedClassNames.contains(className);
  }
> Integer classIndex = 0;
>~Integer addVariableIndex = 0;
>~Integer addMethodIndex = 0;
>~Integer addSubClassIndex = 0;

> OutputClass declaration(Token declaration,OutputClass innerClass, Boolean mustInner, OutputContext parentContext){
	Boolean isInner = declaration->"inner" != null || mustInner;
	OutputClass outerClass = new OutputClass();
	
	if declaration->"className"->"NAME" != null {
	  outerClass.name(new OutputExact('declaration->"className"'));
	  innerClass.name(new OutputExact('declaration->"className"'));
	}
	else {
	  outerClass.name(new OutputConcatenation().add(classwise.name_var(declaration->"className"->"name_var",isInner,parentContext)));
	  innerClass.name(new OutputConcatenation().add(classwise.name_var(declaration->"className"->"name_var",isInner,parentContext)));
	}
	
	OutputCall classPackageName = new OutputCall();
	for Token element: declaration.getAllSafely("packageName") {
	  if element->"NAME" != null {
	    classPackageName.add(new OutputExact('element->"NAME"'));
	  }
	  else if element->"name_var" != null {
	    classPackageName.add(classwise.name_var(element->"name_var",true,parentContext));
	  }
	}
	outerClass._package(classPackageName);
	innerClass._package(innerPackageName);
	for Token element: declaration.getAllSafely("templateTypeName") {
	  outerClass.template(new OutputExact('element'));
	  innerClass.template(new OutputExact('element'));
	}
	for Token element: declaration.getAllSafely("parentName") {
	  if declaration->"inner" != null {
		innerClass.extendType(classwise.type_var(element->"type_var",isInner,parentContext));
	  }
	  outerClass.extendType(classwise.type_var(element->"type_var",isInner,parentContext));
	}
	for Token element: declaration.getAllSafely("interfaceName") {
	   if declaration->"inner" != null {
		innerClass.implement(classwise.type_var(element->"type_var",isInner,parentContext));
	  }
	  outerClass.implement(classwise.type_var(element->"type_var",isInner,parentContext));
	}
	for Token element: declaration.getAllSafely("variable_declaration") {
	  if isInner || element->"inner" != null {
	    innerClass.addVariable(variable.declaration(element,isInner,parentContext));
	  }
	  else {
	    outerClass.addVariable(variable.declaration(element,isInner,parentContext));
	  }
	}
	for Token element: declaration.getAllSafely("method_declaration") {
	  if isInner || element->"inner" != null {
	    innerClass.addMethod(method.declaration(element,isInner,parentContext));
	  }
	  else {
	    outerClass.addMethod(method.declaration(element,isInner,parentContext));
	  }
	}
	for Token element: declaration.getAllSafely("class_declaration") {
	  OutputClass subInnerClass = new OutputClass();
	  OutputClass subOuterClass = classGenerator.declaration(element,subInnerClass,isInner,parentContext);
	  
	  if element->"inner" == null {
	    subInnerClass.addVariable(new OutputVariable().isStatic().set(new OutputType(subInnerClass.getName()), new OutputExact("_")).assign(subOuterClass));
	    outerClass.encloseClass(subOuterClass);
      }
	  innerClass.encloseClass(subInnerClass);
	}
	if 'declaration->"objectType"'.contains("interface"){
	  if isInner {
	    innerClass.isInterface();
	  }
	  else {
	    outerClass.isInterface();
	  }
	}
	else if 'declaration->"objectType"'.contains("enum"){
	  if isInner {
	    innerClass.isEnum();
	  }
	  else {
	    outerClass.isEnum();
	  }
	}
	if declaration->"weak" != null {
	  if isInner {
	    innerClass.isAbstract();
	  }
	  else {
	    outerClass.isAbstract();
	  }
	}
	
	if isInner  == false {
	  if declaration->"static" != null {
	    outerClass.isStatic();
	  }
	  innerClass.isStatic();
	}
	return outerClass;
  }
> void collectClassNames(Token classToken){    
	if classToken->"className"->"NAME" != null && classToken->"inner" == null {
	  \addDefinedClassName(^classToken->"className"->"NAME");
	}
    for Token element: classToken.getAllSafely("class_declaration") {
	  \collectClassNames(element);
	}
  }
}