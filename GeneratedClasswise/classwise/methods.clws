
< Token  : \com.\rem.\gen.\parser;
> MethodGenerator method = new MethodGenerator();
> class MethodGenerator // {
> Set<String> definedMethodNames = new HashSet<String>();
> void addDefinedMethodName(OutputMethod newMethod){
    definedMethodNames.add(newMethod.getName().evaluate());
  }
  
> OutputMethod declaration(Token declaration,Boolean isInner, OutputContext parentContext){
	return \definition(declaration,isInner, parentContext);
  }

> OutputMethod definition(Token input, Boolean mustInner, OutputContext parentContext){
	Boolean isInner = mustInner || input->"inner" != null ;
	OutputMethod newMethod = new OutputMethod ();
	newMethod.setParent(parentContext);
	
	OutputType methodType = classwise.all_type(input->"all_type_name",isInner,parentContext);
	if input->"ARRAY_TYPE" != null {
	  for Token element: input.getAllSafely("ARRAY_TYPE") {
        methodType.array();
	  }
	}
	if (input.get("inline") != null) {
	  if input.get("inline").get("method_parameters") != null{
	    OutputParameters parameters = new OutputParameters();
	    for Token element: input->"inline"->"method_parameters".getAllSafely("parameter") {
	      parameters.add(variable.declaration(element,isInner,parentContext));
	    }
	    newMethod.parameters(parameters);
	  }
	}
	else if input.get("variableParameters") != null{
	  newMethod.parametersAsVariable(body_gen.statement(input->"variableParameters"->"statement_as_method"->"body_statement",true,parentContext));
	}
	#if input->"throwException" != null {
	  StringBuilder exceptionBuilder = new StringBuilder();
	  ~String comma = "";
	  for Token element: input.getAllSafely("throwException"){
	    exceptionBuilder.append(comma);
	    exceptionBuilder.append('element');
	    exceptionBuilder.append("Exception");
	    comma = ",";
	  }
	  newMethod.setThrowsStatement(exceptionBuilder.toString());
	}#
	if input->"body" != null {
	  OutputBody methodBody = new OutputBody ();
	  methodBody.setParent(parentContext);
	  for Token element: input->"body".getAllSafely("body_element"){
	    methodBody.add(body_gen.element(element,isInner,methodBody));
	  }
	  newMethod.body(methodBody);
	}
	
	if input->"methodName" == null {
	  newMethod.set(methodType, new OutputExact(""));
	}
	else if input->"methodName"->"NAME" != null {
	  newMethod.set(methodType, new OutputExact('input->"methodName"->"NAME"'));
	}
	else {
	  newMethod.set(methodType, classwise.name_var(input->"methodName"->"name_var",isInner,parentContext));
	}
	if input->"static" != null {
	  newMethod.isStatic();
	}
	if input->"weak" != null {
	  newMethod.isAbstract();
	}
	return newMethod;
  }
}