
< Token  : \com.\rem.\gen.\parser;
> VariableGenerator variable = new VariableGenerator();
> class 'packageName' VariableGenerator {
> Set<String> definedVariableNames = new HashSet<String>();
> void addDefinedVariableName(OutputVariable definedVariable){
	definedVariableNames.add(definedVariable.getName().evaluate());
  }
> OutputVariable declaration(Token declaration,Boolean mustInner,OutputContext parentContext){
	Boolean isInner = mustInner || declaration->"inner" != null;
	
	OutputVariable newVariable = new OutputVariable ();
	
	OutputType type = classwise.all_type(declaration->"typeName",isInner,parentContext);
    for Token element: declaration.getAllSafely("ARRAY_TYPE"){
      type.array();
    }
    if declaration->"INLINE_LIST" != null {
      type.isInlineList();
    }
    
    if declaration->"method_argument" != null {
      newVariable.assign(body_gen.argument(declaration->"method_argument",isInner,parentContext));
	}
    if declaration->"isFinal" != null {
	  newVariable.isFinal();
    }
    if declaration->"static" != null {
      newVariable.isStatic();
      newVariable.isPublic();
    }
    
	if declaration->"variableName"->"NAME" != null || isInner {
	  newVariable.set(type, new OutputExact('declaration->"variableName"'));
	}
	else {
	  newVariable.set(type, classwise.name_var(declaration->"variableName"->"name_var",isInner,parentContext));
	}
	
	return newVariable;
  }	
  
> LineableOutput assignment(Token input, Boolean isInner, OutputContext parentContext) {
	return new OutputStatement().set(new OutputOperator().left(classwise.name_var(input->"name_var",isInner,parentContext)).operator("=")
	                           .right(body_gen.argument(input->"method_argument",isInner,parentContext)));
  }

}