

> BodyGenerator body = new BodyGenerator();
> class BodyGenerator // {
    ~Integer exceptionIndex = 0;
    ~Boolean isClassArgument = false;
    void setIsClassArgument(Boolean newClassArgument){
      isClassArgument = newClassArgument;
    }
    Statement element(Token input, Boolean isInner, Context parentContext) {
      for Token element: input.getAll() {
        if element.getName().equals("body_manipulate") {
          return \manipulate(element,isInner,parentContext);
        }
        else if element.getName().equals("body_line") {
          if element->"variable_declaration" != null {
            return |`variable.declaration(element->"variable_declaration",isInner,parentContext)`;|;
          }
          else if element->"variable_assignment" != null {
            return |`variable.assignment(element->"variable_assignment",isInner,parentContext)`;|;
          }
          else if element->"body_statement" != null {
            return |`body.statement(element->"body_statement",isInner,parentContext)`;|;
          }
        }
        else if element.getName().equals("body_return") {
          if element->"method_argument" != null {
            Boolean returnIsInner = isInner || element->"inner" != null;
            return |return `body.argument(element->"method_argument", returnIsInner, parentContext)`;|;
          }
          else {
            return |return void;|;
          }
        }
        else if element.getName().equals("body_throw") {
          Boolean throwIsInner = isInner || element->"inner" != null;
          return |throw `body.statement(element->"body_statement",throwIsInner, parentContext)`;|;
        }
        else if element.getName().equals("class_declaration") {
          Class innerClass = new Class ();
          Class outerClass = new Class ();
          classGenerator.declaration(element->"class_declaration",innerClass,outerClass,false,parentContext);
          String variableName = outerClass.getName()\+"Class";
          parentContext.add(\ExternalClassEntry 'variableName';);
          return {
              Class 'variableName' = `outerClass.getAsStatement()`;
              'variableName'.__INIT__();
              \MainFlow.outputClasses.add('variableName');
            };
        }
        else if element.getName().equals("body_conditional") {
          Boolean conditionalIsInner = isInner || element->"inner" != null;
          ~Boolean isCase = false;
          ~String conditionalName = "";
          if element->"conditional".getAll() == null {
            conditionalName = element->"conditional".getValue().trim();
          }
          else {StringBuilder conditionalNameBuilder = new StringBuilder();
            ~String space = "";
            for Token conditionName: element->"conditional".getAll() {
              conditionalNameBuilder.append(space);
              conditionalNameBuilder.append(conditionName.getValue().trim());
              space = " ";
            }
            conditionalName = conditionalNameBuilder.toString();
          }
          ~Statement statement = null;
          if element->"body_statement" != null {
            statement = body.statement(element->"body_statement",isInner,parentContext);
          }
          for Token atom: element.getAllSafely("variable_declaration") {
            String operator = 'element->"OPERATOR"';
            
            if operator.contains(":") {
              Statement headerStatement = new Statement (":");
              Variable headerVariable = variable.declaration(atom,conditionalIsInner,parentContext);
              headerStatement.add(headerVariable);
              headerStatement.add(statement);
              statement = headerStatement;
            }
            else {
              Statement headerStatement = new Statement (";");
              Variable headerVariable = variable.declaration(atom,conditionalIsInner,parentContext);
              headerVariable.setAssignment(|"0"|);
              headerVariable.setIsFinal(false);
              headerStatement.add(headerVariable);
              Statement evaluationStatement = new Statement (operator);
              evaluationStatement.add(headerVariable.getNameAsStatement());
              evaluationStatement.add(statement);
              headerStatement.add(evaluationStatement);
              Statement incrementationStatement = new Statement ();
              incrementationStatement.add(headerVariable.getNameAsStatement());
              incrementationStatement.add(|"++"|);
              headerStatement.add(incrementationStatement);
              statement = headerStatement;
            }
          }
          for Token atom: element.getAllSafely("exception") {
            String exceptionType;
            if atom.getValue().contains("*") {
              exceptionType = "Exception";
            }
            else {
              String exceptionTypeName = atom.getValue();
              exceptionType = ^exceptionTypeName \+ "Exception";
            }
            if statement == null {
              statement = |'exceptionType'|;
            }
            else {
              Statement previousStatement = statement;
              statement = |`previousStatement` \| 'exceptionType'|;
            }
          }
          
          if element->"exception" != null {
            String exceptionVariableName = "e"\+'exceptionIndex';
            Statement exceptionStatement = new Statement (" ");
            exceptionStatement.add(statement);
            exceptionStatement.add(|'exceptionVariableName'|);
            statement = exceptionStatement;
          }
          ~Statement conditionalBody = new Body ();
          for Token atom: element.getAllSafely("as_body") {
            if element->"PRINT" != null {
              conditionalBody.add(|"e"+'exceptionIndex'.printStackTrace();|);
            }
            for Token quark: atom.getAllSafely("body_element") {
              Statement bodyElem = body.element(quark,conditionalIsInner,conditionalBody.getContext());
              if bodyElem != null {
                conditionalBody.add(bodyElem);
              }
            }
          }
		  if element->"exception" != null {
            exceptionIndex \+= 1;
          }
          if element->"statement_as_method" != null {
            conditionalBody = body.statement(element->"statement_as_method"->"body_statement",true,parentContext);
          }
          
          if conditionalName.contains("case") {
            Statement previousStatement = statement;
            return new Statement.Conditional(conditionalName.trim()\+" ","",| `previousStatement`+":"|,"",conditionalBody);
          }
          else {
            return new Statement.Conditional(conditionalName,statement,conditionalBody);
          }
        }
      }
      return null; 
    }

	Statement statement(Token input, Boolean mustInner, Context parentContext){
	  Boolean isInner = mustInner || input->"inner" != null;
	  Statement statement = new Statement();
	  for Token element: input.getAll() {
	    if element.getName().equals("statement_as_char") {
	      return new Statement (new StringEntry("\'"), new StringEntry("\'"),new Statement (new StringEntry('element')));
	    }
	    if element.getName().equals("statement_as_string") {
	      if isInner {
		    return | `body.statement(element->"body_statement",true,parentContext)`.toString() |;
		  }
		  else {
		    return new Statement (new VariableNameEntry(body.statement(element->"body_statement",true,parentContext)));
		  }
	    }
	    else if element.getName().equals("body_call") {
	      statement.add(body.call(element,isInner,parentContext));
	    }
	    else if element.getName().equals("OPERATOR") {
	      statement.set(element.getValue().trim());
	    }
	  }
	  return statement;
	}
	
	~Boolean statementIsBraced = false;
	Statement call(Token input, Boolean mustInner, Context parentContext){
	  Boolean isInner = mustInner || input->"inner" != null;
	  if input->"as_braced" != null {
	    Statement call = new Statement ();
	    statementIsBraced = true;
	    call.add(|(`body.statement(input->"as_braced"->"left"->"statement_as_braced"->"body_statement",isInner,parentContext)`)|);
	    statementIsBraced = false;
	    if input->"as_braced"->"OPERATOR" != null {
	      call.set(input->"as_braced"->"OPERATOR".getValue().trim());
	    }
	    if input->"as_braced"->"right" != null {
	      call.add(body.statement(input->"as_braced"->"right"->"body_statement",isInner,parentContext));
	    }
	    return call;
	  }
	  Statement statement = new Statement ();
	  statement.set(".");
	  ~Boolean containsNameName = false;
	  for Token element: input.getAllSafely("group") {
	    if element->"NAME" != null {
	      containsNameName = true;
	    }
	  }
	  for Token element: input.getAllSafely("group") {
		Parameters parameters = new Parameters ();
		Parameters arrayParameters = new Parameters ();
		~Statement subject = null;
		if element->"type_var" != null {
		  Type subjectAsType = new Type();
		  for Token atom: element.getAllSafely("type_var") {
		    classwise.type_var(atom,subjectAsType,isInner,parentContext);
		  }
		  if element->"NEW" == null {
		    if isClassArgument == false {
		      subjectAsType.as_variable();
		    }
		    else {
		      subjectAsType.as_entry();
		    }
		  }
		  subject = subjectAsType.getAsStatement();
		}
		else if element->"typeName" != null {
		  Type subjectAsType = new Type();
		  for Token atom: element.getAllSafely("typeName") {
		    classwise.all_type(atom,subjectAsType,isInner,parentContext);
		  }
		  if element->"NEW" == null {
		    subjectAsType.as_variable();
		  }
		  subject = subjectAsType.getAsStatement();
		}
		else if element->"name_var" != null {
		  NameVar nameVar = new NameVar();
		  classwise.name_var(element->"name_var",nameVar,isInner,parentContext);
		  subject = nameVar.getAsStatement();
		}
		else {
		  subject = |'element->"NAME"'|;
		}
		~Boolean containsParameters = false;
		for Token atom: element.getAllSafely("method_arguments") {
		  containsParameters = true;
		  for Token quark: atom.getAllSafely("method_argument"){
			parameters.add(body.argument(quark,isInner,parentContext));
	      }
	    }
	    ~Boolean containsArrayParameters = false;
		for Token atom: element.getAllSafely("array_parameters") {
		  containsArrayParameters = true;
		  if atom->"method_argument" == null {
		    arrayParameters.add(|""|);
		  }
		  else {
		    for Token quark: atom.getAllSafely("method_argument"){
			  arrayParameters.add(body.argument(quark,isInner,parentContext));
	        }
	      }
	    }
		if element->"NEW" != null {
		  Statement subjectAsType = subject;
		  if containsArrayParameters {
		    if containsParameters {
		      statement.add(|new `subjectAsType`(`parameters`)[`arrayParameters`]|);
		    }
		    else {
		      statement.add(|new `subjectAsType`[`arrayParameters`]|);
		    }
		  }
		  else {
		    statement.add(|new `subjectAsType`(`parameters`)|);
		  }
		}
		else {
		  Statement subjectAsSubject = subject;
		  if containsParameters {
		    if containsArrayParameters {
		      statement.add(|`subjectAsSubject`(`parameters`)[`arrayParameters`]|);
		    }
		    else {
		      statement.add(|`subjectAsSubject`(`parameters`)|);
		    }
		  }
		  else {
		    if containsArrayParameters {
		      statement.add(|`subjectAsSubject`[`arrayParameters`]|);
		    }
		    else {
		      statement.add(subject);
		    }
		  }
		}
	  }
	  if statement.size() == 1 {
	    return statement.get(0);
	  }
	  else {
	    return statement;
	  }
    }
  ~Integer tempTokenElementIndex = 0;
  Statement manipulate(Token input, Boolean isInner, Context parentContext){
      if input->"type_var" != null {
        ~Type type = new Type();
        classwise.type_var(input->"type_var",type,true,parentContext);
        #~Type realType = classwise.type_var(input->"type_var",true,3,parentContext);#
        NameVar access = new NameVar();
        if input->"name_var" != null {
          classwise.name_var(input->"name_var",access,true,parentContext);
        }
        type.as_entry();
        if input->"class_declaration" != null {
          Class innerClass = new Class ();
          Class outerClass = new Class ();
          classGenerator.declaration(input->"class_declaration",innerClass,outerClass,false,parentContext);
          if input->"methodName".getValue().contains("+=") {
            return |`type.getAsStatement()`.addSubClass(`outerClass.getAsStatement()`);|;
          }
          else {
            return |`type.getAsStatement()`.'input->"methodName"'(`outerClass.getAsStatement()`);|;
          }
        }
        else if input->"method_declaration" != null {
          Method newMethod = method.declaration(input->"method_declaration",false,parentContext);
          if input->"methodName".getValue().contains("+=") {
            return |`type.getAsStatement()`.addMethod(`newMethod.getAsStatement()`);|;
          }
          else {
            return |`type.getAsStatement()`.'input->"methodName"'(`newMethod.getAsStatement()`);|;
          }
        }
        else if input->"variable_declaration" != null {
          Variable newVariable = variable.declaration(input->"variable_declaration",false,parentContext);
          if input->"methodName".getValue().contains("+=") { 
            return |`type.getAsStatement()`.addVariable(`newVariable.getAsStatement()`);|;
          }
          else {
            return |`type.getAsStatement()`.'input->"methodName"'(`newVariable.getAsStatement()`);|;
          }
        }
        else if input->"body" != null {
          Parameters arguments = new Parameters ();
          for Token element: input->"body".getAllSafely("body_element") {
            Statement newBodyElement = body.element(element,false,new Context (true,parentContext));
            if newBodyElement != null {
              arguments.add(newBodyElement);
            }
          }
          if input->"methodName".getValue().contains("+=") { 
            return |`type.getAsStatement()`.appendToBody(`arguments`);|;
          }
          else {
            return |`type.getAsStatement()`.'input->"methodName"'(`arguments`);|;
          }
        }
      }
      else {
        Statement subject;
        ~String elementName = null;
        if input->"variableName" != null {
          elementName = input->"variableName".getValue();
        }
        if input->"name_var" != null {
          NameVar nameVar = new NameVar();
          classwise.name_var(input->"name_var",nameVar,true,parentContext);
          subject = nameVar.getAsStatement();
        }
        else {
          subject = new Statement ();
        }
        Body manipulateBody = new Body ();
        ~Integer numberOfInstances = 0;
        for Token element: input.getAllSafely("tokenInstance") {
          numberOfInstances \+= 1;
        }
        ~String singleTokenName = null;
        String tokenTypePath = "com.rem.gen.parser.Token";
        for Token element: input.getAllSafely("tokenInstance") {
          String tokenName = 'element->"tokenName"';
          singleTokenName = tokenName;
          Body instanceBody = new Body ();
          Context bodyContext = new Context (true,parentContext);
          String elementNameValue;
          if elementName == null {
            elementNameValue = tokenName;
          }
          else {
            elementNameValue = elementName;
          }
          if numberOfInstances != 1 && elementName == null{
            Integer tempTokenElementIndexValue = tempTokenElementIndex;
            instanceBody.add(|'tokenTypePath' 'elementName' = "__TEMP_TOKEN_ELEMENT_NAME__"+'tempTokenElementIndexValue';|);
          }
          for Token atom: element.getAllSafely("body_element") {
            Statement newBodyElement = body.element(atom,true,bodyContext);
            if newBodyElement != null {
              instanceBody.add(newBodyElement);
            }
          }
          if numberOfInstances == 1 {
            manipulateBody.add(instanceBody);
          }
          else {
            manipulateBody.add(|if 'elementNameValue'.getName().equals('' 'tokenName'  '') `instanceBody`|);
          }
        }
        if numberOfInstances == 1 {
          String singleTokenNameValue = singleTokenName;
          return |for 'tokenTypePath' 'elementName': `subject`.getAllSafely('' 'singleTokenNameValue' '') `manipulateBody`|;
        }
        else {
          if elementName != null {
            return |for 'tokenTypePath' 'elementName': `subject`.getAll() `manipulateBody`|;
          }
          else {
            Integer tempTokenElementIndexValue = tempTokenElementIndex;
            tempTokenElementIndex \+= 1;
            return |for 'tokenTypePath' "__TEMP_TOKEN_ELEMENT_NAME__"+'tempTokenElementIndexValue': `subject`.getAll() `manipulateBody`|;
          }
        }
      }
      return null;
    }
    Statement argument(Token input, Boolean isInner, Context parentContext){
      for Token element: input.getAll() {
		if element.getName().equals("class_declaration") {
		  Class innerClass = new Class ();
          Class outerClass = new Class ();
          classGenerator.declaration(element,innerClass,outerClass,false,parentContext);
		  return outerClass.getAsStatement();
		}
		else if element.getName().equals("method_declaration") {
		  return method.declaration(element,false, parentContext).getAsStatement();
		}
		else if element.getName().equals("variable_declaration") {
		  return variable.declaration(element,false,parentContext).getAsStatement();
		}
		else if element.getName().equals("body_statement") {
		  return body.statement(element,isInner,parentContext);
		}
		else if element.getName().equals("as_statement") {
		  if element->"body_element" != null {
		    Body argumentBody = new Body ();
		    for Token atom: element.getAllSafely("body_element") {
			  Statement newBodyElement = body.element(atom,false,parentContext);
			  if newBodyElement != null {
			    argumentBody.add(newBodyElement);
			  }
			}
			return argumentBody.getAsStatement();
	      }
	      else if element->"body_statement" != null {
	        return body.statement(element->"body_statement",false,parentContext).getAsStatement();
	      }
	    }
	    else if element.getName().equals("body_entries") {
	      Body elements = new Body ();
	      for Token atom: element.getAllSafely("body_element") {
	        Statement newBodyElement = body.element(atom,false, parentContext);
	        if newBodyElement != null {
	          elements.add(newBodyElement);
	        }
		  }
		  return elements.getAsStatement();
		}
      }
	  return null;
	}
}