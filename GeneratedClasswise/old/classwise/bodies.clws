

> BodyGenerator body = new BodyGenerator();
> class BodyGenerator // {
    ~Integer exceptionIndex = 0;
    
    boolean elementHasReturn(Token input) {
      for Token element: input.getAll() {
        if element.getName().equals("body_return") {
          return true;
        }
        else if element.getName().equals("body_conditional") {
          return \conditionalHasReturn(element);
        }
      }
      return false;
    }
    boolean conditionalHasReturn(Token input){
      for Token atom: input.getAllSafely("as_body") {
        ~Token lastElement = null; 
        List<Token> elements = atom.getAllSafely("body_element");
        ~int i = elements.size() \- 1;
        while i >= 0 && lastElement==null {
          String currentName = elements.get(i).getAll().get(0).getName();
          if currentName.equals("comments")==false&&currentName.equals("SYNTAX")==false {
             lastElement = elements.get(i);
          }
          i \-= 1;
        }
        if lastElement != null {
          return \elementHasReturn(lastElement);
        }
      }
      return false;
    }
    
    Statement element(Token input, Boolean isInner, Context parentContext) {
      for Token element: input.getAll() {
        if element.getName().equals("body_add_to_class") {
          return \addToClass(element,isInner,parentContext);
        }
        else if element.getName().equals("body_access_token") {
          return \accessToken(element,isInner,parentContext);
        }
        else if element.getName().equals("variable_declaration") {
          return |`variable.declaration(element,isInner,parentContext)`;|;
        }
        else if element.getName().equals("variable_assignment") {
          return |`variable.assignment(element,isInner,parentContext)`;|;
        }
        else if element.getName().equals("body_statement") {
          return |`body.statement(element,isInner,parentContext)`;|;
        }
        else if element.getName().equals("body_return") {
          if element->"method_argument" != null {
            return |return `body.argument(element->"method_argument", isInner, parentContext)`;|;
          }
          else {
            return |return void;|;
          }
        }
        else if element.getName().equals("body_throw") {
          return |throw `body.statement(element->"body_statement",isInner, parentContext)`;|;
        }
        else if element.getName().equals("body_conditional") {
          ~Boolean isCase = false;
          ~String conditionalName = "";
          exceptionIndex = 0;
          if element->"conditional".getAll() == null {
            conditionalName = element->"conditional".getValue().trim();
          }
          else {StringBuilder conditionalNameBuilder = new StringBuilder();
            ~String space = "";
            for Token conditionName: element->"conditional".getAll() {
              conditionalNameBuilder.append(space);
              conditionalNameBuilder.append(conditionName.getValue().trim());
              space = " ";
            }
            conditionalName = conditionalNameBuilder.toString();
          }
          ~Statement statement = null;
          if element->"body_statement" != null {
            statement = body.statement(element->"body_statement",isInner,parentContext);
          }
          for Token atom: element.getAllSafely("variable_declaration") {
            String operator = 'element->"OPERATOR"';
            if operator.contains(":") {
              Statement headerStatement = new Statement (":");
              Variable headerVariable = variable.declaration(atom,isInner,parentContext);
              headerStatement.add(headerVariable);
              headerStatement.add(statement);
              statement = headerStatement;
            }
            else {
              Statement headerStatement = new Statement (";");
              Variable headerVariable = variable.declaration(atom,isInner,parentContext);
              headerVariable.setAssignment(|"0"|);
              headerVariable.setIsFinal(false);
              headerStatement.add(headerVariable);
              Statement evaluationStatement = new Statement (operator);
              evaluationStatement.add(headerVariable.getNameAsStatement());
              evaluationStatement.add(statement);
              headerStatement.add(evaluationStatement);
              Statement incrementationStatement = new Statement ();
              incrementationStatement.add(headerVariable.getNameAsStatement());
              incrementationStatement.add(|"++"|);
              headerStatement.add(incrementationStatement);
              statement = headerStatement;
            }
          }
          for Token atom: element.getAllSafely("exception") {
            String exceptionType;
            if atom.getValue().contains("*") {
              exceptionType = "Exception";
            }
            else {
              String exceptionTypeName = atom.getValue();
              exceptionType = ^exceptionTypeName \+ "Exception";
            }
            if statement == null {
              statement = |'exceptionType'|;
            }
            else {
              Statement previousStatement = statement;
              statement = |`previousStatement` \| 'exceptionType'|;
            }
          }
          
          if element->"exception" != null {
            String exceptionVariableName = "e"\+'exceptionIndex';
            Statement exceptionStatement = new Statement (" ");
            exceptionStatement.add(statement);
            exceptionStatement.add(|'exceptionVariableName'|);
            statement = exceptionStatement;
          }
          ~Statement conditionalBody = new Body ();
          for Token atom: element.getAllSafely("as_body") {
            if element->"PRINT" != null {
              conditionalBody.add(|"e"+'exceptionIndex'.printStackTrace();|);
            }
            for Token quark: atom.getAllSafely("body_element") {
              Statement bodyElem = body.element(quark,isInner,conditionalBody.getContext());
              if bodyElem != null {
                conditionalBody.add(bodyElem);
              }
            }
          }
		  if element->"exception" != null {
            exceptionIndex \+= 1;
          }
          if element->"statement_as_method" != null {
            conditionalBody = body.statement(element->"statement_as_method"->"body_statement",true,parentContext);
          }
          
          if conditionalName.contains("case") {
            Statement previousStatement = statement;
            return new Statement.Conditional(conditionalName.trim()\+" ","",| `previousStatement`+":"|,"",conditionalBody);
          }
          else {
            return new Statement.Conditional(conditionalName,statement,conditionalBody);
          }
        }
      }
      return new Statement (); 
    }
    
    
	Statement statement(Token input, Boolean isInner, Context parentContext){
	  Statement statement = new Statement();
	  for Token element: input.getAll() {
	    if element.getName().equals("type_var") {
	      Type type = new Type();
	      type.as_variable();
	      classwise.type_var(element,type,isInner,parentContext); 
	      return type.getAsStatement();
	    }
	    else if element.getName().equals("body_call") {
	      statement.add(body.call(element,isInner,parentContext));
	    }
	    else if element.getName().equals("OPERATOR") {
	      if element->"exact" != null {
	        statement.set(element.getValue().trim());
	      }
	      else {
	        statement.set(element.getValue().substring(1).trim());
	      }
	    }
	  }
	  return statement;
	}
	
    
	Statement call(Token input, Boolean mustInner, Context parentContext){
	  Boolean isInner = mustInner || input->"inner" != null;
	  if input->"as_braced" != null {
	    Statement call = new Statement ();
	    call.add(|(`body.statement(input->"as_braced"->"statement_as_braced"->"body_statement",isInner,parentContext)`)|);
	    return call;
	  }
	  else if input->"as_statement" != null {
        for Token element: input->"as_statement".getAllSafely("body_element") {
          Statement newBodyElement = body.element(element,false,new Context (true,parentContext));
          if newBodyElement != null {
            return newBodyElement.getAsStatement();
          }
        }
        for Token element: input->"as_statement".getAllSafely("body_statement") {
          Statement newBodyElement = body.statement(element,false,new Context (true,parentContext));
          if newBodyElement != null {
            return newBodyElement.getAsStatement();
          }
        }
      }
	  Statement statement = new Statement ();
	  ~int groupIndex = 0;
	  boolean hasMethodOrVariable = input.getAllSafely("group").size() > 1;
	  for Token element: input.getAllSafely("group") {
	    if element->"separator" != null {
	      statement.set(element->"separator".getValue());
	    }
		Parameters parameters = new Parameters ();
		Parameters arrayParameters = new Parameters ();
		arrayParameters.set("][");
		~Boolean containsParameters = false;
		for Token atom: element.getAllSafely("method_arguments") {
		  containsParameters = true;
		  for Token quark: atom.getAllSafely("method_argument"){
			parameters.add(body.argument(quark,isInner,parentContext));
	      }
	    }
	    ~Boolean containsArrayParameters = false;
		for Token atom: element.getAllSafely("array_parameters") {
		  containsArrayParameters = true;
		  if atom->"method_argument" == null || 'atom->"method_argument"' == null {
		    arrayParameters.add(|""|);
		  }
		  else {
		    for Token quark: atom.getAllSafely("method_argument"){
			  arrayParameters.add(body.argument(quark,isInner,parentContext));
	        }
	      }
	    }
		~Statement subject = null;
		if element->"all_type_name" != null {
		  Type subjectAsType = new Type();
		  classwise.all_type(element->"all_type_name",subjectAsType,isInner,parentContext);
		  if element->"NEW" != null {
		    subjectAsType.plain();
		    if arrayParameters.size() > 0 {
		      statement.add(|new `subjectAsType.getAsStatement()`(`parameters`)[`arrayParameters`]|);
		    }
		    else {
		      statement.add(|new `subjectAsType.getAsStatement()`(`parameters`)|);
		    }
		  }
		  else {
		    if hasMethodOrVariable {
		      subjectAsType.plain();
		    }
		    else {
		      subjectAsType.as_variable();
		    }
		    statement.add(subjectAsType.getAsStatement());
		  }
		  \continue;
		}
		else if element->"name_var" != null {
		  NameVar nameVar = new NameVar();
		  classwise.name_var(element->"name_var",nameVar,isInner,parentContext);
		  subject = nameVar.getAsStatement();
		}
		else {
 		  ~String value = 'element->"NAME"';
		  if groupIndex==0&&classwise.getMainClass().getMethod(value)!=null && (parentContext == null || parentContext.hasLink(value) == false) {
 		    value = "MainFlow.self."\+value;
 	      }
		  subject = |'value'|;
		}
		
		if containsParameters {
		  if containsArrayParameters {
		    statement.add(|`subject`(`parameters`)[`arrayParameters`]|);
		  }
		  else {
		    statement.add(|`subject`(`parameters`)|);
		  }
		}
		else {
		  if containsArrayParameters {
		    statement.add(|`subject`[`arrayParameters`]|);
		  }
		  else {
		    statement.add(subject);
		  }
		}
		groupIndex \+= 1;
	  }
	  if statement.size() == 1 {
	    return statement.get(0);
	  }
	  else {
	    return statement;
	  }
    }
  ~Integer tempTokenElementIndex = 0;
  Statement addToClass(Token input, Boolean isInner, Context parentContext){
    ~Type type = new Type();
    classwise.type_var(input->"type_var",type,true,parentContext);
    #~Type realType = classwise.type_var(input->"type_var",true,3,parentContext);#
    NameVar access = new NameVar();
    if input->"name_var" != null {
      classwise.name_var(input->"name_var",access,true,parentContext);
    }
    type.as_entry();
    if input->"class_declaration" != null {
      Class innerClass = new Class ();
      Class outerClass = new Class ();
      classGenerator.declaration(input->"class_declaration",innerClass,outerClass,false,parentContext);
      return |`type.getAsStatement()`.addSubClass(`outerClass.getAsStatement()`);|;
    }
    else if input->"method_declaration" != null {
      Method newMethod = method.declaration(input->"method_declaration",false,parentContext);
      return |`type.getAsStatement()`.addMethod(`newMethod.getAsStatement()`);|;
    }
    else if input->"variable_declaration" != null {
      Variable newVariable = variable.declaration(input->"variable_declaration",false,parentContext);
      return |`type.getAsStatement()`.addVariable(`newVariable.getAsStatement()`);|;
    }
    else {
      Body arguments = new Body ();
      if input->"body"->"as_statement" != null {
        for Token element: input->"body"->"as_statement".getAllSafely("body_element") {
          Statement newBodyElement = body.element(element,false,new Context (true,parentContext));
          if newBodyElement != null {
            arguments.add(newBodyElement);
          }
        }
        for Token element: input->"body"->"as_statement".getAllSafely("body_statement") {
          Statement newBodyElement = body.statement(element,false,new Context (true,parentContext));
          if newBodyElement != null {
            arguments.add(newBodyElement);
          }
        }
      }
      else {
        for Token element: input->"body".getAllSafely("body_element") {
          Statement newBodyElement = body.element(element,false,new Context (true,parentContext));
          if newBodyElement != null {
            arguments.add(newBodyElement);
          }
        }
      }
      return |`type.getAsStatement()`.appendToBody(`arguments.getAsStatement()`);|;
    }
  }
    
  Statement accessToken(Token input, Boolean isInner, Context parentContext){
    Statement subject;
    ~String elementName = null;
    if input->"variableName" != null {
      elementName = input->"variableName".getValue();
    }
    NameVar nameVar = new NameVar();
    classwise.tokenAccess(input->"tokenAccess",nameVar,true,parentContext);
    subject = nameVar.getAsStatement();
    ~Integer numberOfInstances = 0;
    for Token element: input.getAllSafely("tokenInstance") {
      numberOfInstances \+= 1;
    }
    Body manipulateBody = new Body ();
    ~String singleTokenName = null;
    String tokenTypePath = "final com.rem.gen.parser.Token";
    for Token element: input.getAllSafely("tokenInstance") {
      String tokenName = 'element->"tokenName"';
      singleTokenName = tokenName;
      Body instanceBody = new Body ();
      Context bodyContext = new Context (true,parentContext);
      String elementNameValue;
      if elementName == null {
        elementNameValue = tokenName;
      }
      else {
        elementNameValue = elementName;
      }
      if numberOfInstances != 1 && elementName == null{
        Integer tempTokenElementIndexValue = tempTokenElementIndex;
        instanceBody.add(|'tokenTypePath' 'elementName' = "__TEMP_TOKEN_ELEMENT_NAME__"+'tempTokenElementIndexValue';|);
      }
      ~Token lastElement = null;
      for Token atom: element.getAllSafely("body_element") {
        Statement newBodyElement = body.element(atom,true,bodyContext);
        if newBodyElement != null {
          instanceBody.add(newBodyElement);
          lastElement = atom;
        }
      }
      if numberOfInstances == 1 {
        manipulateBody.add(instanceBody);
      }
      else {
        if lastElement != null {
          if body.elementHasReturn(lastElement) == false {
            instanceBody.add(|"break";|);
          }
        }
        manipulateBody.add(|case "_"+'tokenName' `instanceBody`|);
      }
    }
    if numberOfInstances == 1 {
      String singleTokenNameValue = singleTokenName;
      return |for 'tokenTypePath' 'elementName': `subject`.getAllSafely("com.rem.gen.parser.Token.Id._"+'singleTokenNameValue') `manipulateBody`|;
    }
    else {
      if elementName != null {
        return |for 'tokenTypePath' 'elementName': `subject`.getAll() {
                  switch 'elementName'.getName() `manipulateBody`
                }|;
      }
      else {
        Integer tempTokenElementIndexValue = tempTokenElementIndex;
        tempTokenElementIndex \+= 1;
        return |for 'tokenTypePath' "__TEMP_TOKEN_ELEMENT_NAME__"+'tempTokenElementIndexValue': `subject`.getAll() `manipulateBody`|;
      }
    }
  }
  Statement argument(Token input, Boolean isInner, Context parentContext){
    for Token element: input.getAll() {
	  if element.getName().equals("class_declaration") {
		Class innerClass = new Class ();
        Class outerClass = new Class ();
        classGenerator.declaration(element,innerClass,outerClass,false,parentContext);
		return |ExternalClassHelper.init(`outerClass.getAsStatement()`)|;
      }
      else if element.getName().equals("method_declaration") {
		return method.declaration(element,false, parentContext).getAsStatement();
	  }
	  else if element.getName().equals("variable_declaration") {
		return variable.declaration(element,false,parentContext).getAsStatement();
	  }
	  else if element.getName().equals("body_statement") {
		return body.statement(element,isInner,parentContext);
	  }
	  else if element.getName().equals("as_statement") {
		if element->"body_element" != null {
		  Body argumentBody = new Body ();
		  for Token atom: element.getAllSafely("body_element") {
		    Statement newBodyElement = body.element(atom,false,parentContext);
			if newBodyElement != null {
			  argumentBody.add(newBodyElement);
			}
		  }
		  return argumentBody.getAsStatement();
	    }
	    else if element->"body_statement" != null {
	      return body.statement(element->"body_statement",false,parentContext).getAsStatement();
	    }
	  }
	  else if element.getName().equals("body_entries") {
	    Body elements = new Body ();
	    for Token atom: element.getAllSafely("body_element") {
	      Statement newBodyElement = body.element(atom,false, parentContext);
	      if newBodyElement != null {
	        elements.add(newBodyElement);
	      }
		}
		return elements.getAsStatement();
	  }
	  else if element.getName().equals("lambda") {
		Context childContext = new Context (true, parentContext);
		Parameters variableNames = new Parameters ();
		for Token atom: element.getAllSafely("variableName") {
		  childContext.add(new Variable (|"Object"|, |'atom'|));
		  variableNames.add(|'atom'|);
		}
		Statement vars;
		if element.getAllSafely("variableName").size()==0||element.getAllSafely("variableName").size()>1 {
		  vars = |"("+`variableNames`+")"|;
		}
		else {
		  vars = variableNames;
		}
		Statement statement;
		if element->"body" !=null {
		  Body elements = new Body ();
	      for Token atom: element.get("body").getAllSafely("body_element") {
	        Statement newBodyElement = body.element(atom,isInner, childContext);
	        if newBodyElement != null {
	          elements.add(newBodyElement);
	        }
		  }
		  if isInner {
		    statement = |"{"+`elements`+"}"|;
		  }
		  else {
		    statement = |"{"+`elements.getAsStatement()`+"}"|;
		  }
		}
		else {
		  statement = body.statement(element.get("body_statement"),isInner, childContext);
		}
		Statement result = new Statement();
		result.set("->");
		result.add(vars);
		result.add(statement);
		return result;
      }
    }
	return new Statement ();
  }
}