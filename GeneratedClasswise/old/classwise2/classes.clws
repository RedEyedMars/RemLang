
> ClassGenerator classGenerator = new ClassGenerator();
> class ClassGenerator {
  Set<String> definedClassNames = new HashSet<String>();
  Integer classIndex = 0;
  Integer addVariableIndex = 0?
  Integer addMethodIndex = 0?
  Integer addSubClassIndex = 0?
  
  void addDefinedClassName(String className){
	definedClassNames.add(className);
  }
  boolean hasDefinedClassName(String className){
    return definedClassNames.contains(className);
  }

> void declaration(%T declaration,Class innerClass, Class outerClass, boolean mustInner, Context parentContext){
	boolean isInner = declaration->inner != null || mustInner;
	Statement classPackageName = new Statement();
	classPackageName.set(".");
	
	if declaration->className->NAME != null {
	  innerClass.setNameAsStatement(new Statement (new StringEntry(char\"+'declaration->className'+char\")));
	  innerClass.setName('declaration->className');
	  outerClass.setNameAsStatement(new Statement (new StringEntry(char\"+'declaration->className'+char\")));
	  outerClass.setName('declaration->className');
	}
	else {
	  innerClass.setNameAsStatement(new Statement (new StringEntry(char\"+'declaration->className'+char\")));
	  innerClass.setNameAsStatement(|'declaration->className'|);
	  innerClass.setName('declaration->className');
	  outerClass.setNameAsStatement(new Statement (new StringEntry(char\"+'declaration->className'+char\")));
	  outerClass.setNameAsStatement(|'declaration->className'|);
	  outerClass.setName('declaration->className');
	}
	
	declaration : element : packageName {
	  if element->NAME != null {
	    classPackageName.add(|'element->NAME'|);
	  }
	  else if element->quote != null {
	    classPackageName.add(|'element->quote'|);
	  }
	  else if element->statement_as_string != null {
	    classPackageName.add(body.statement(element->statement_as_string->body_statement,true,parentContext));
	  }
	}
	declaration : element : templateTypeName {
	  innerClass.addTemplateType(|'element'|);
	  outerClass.addTemplateType(|'element'|);
	}
	innerClass.setPackageName(classPackageName);
	outerClass.setPackageName(classPackageName);
	declaration : element : parentName {
	  Type parentType = new Type ();
	  classwise.type_var(element->type_var,parentType,isInner,parentContext);
	  innerClass.setParentClass(parentType.getAsStatement());
	  outerClass.setParentClass(parentType.getAsStatement());
	}
	declaration : element : interfaceName {
	  Type interfaceType = new Type ();
	  classwise.type_var(element->type_var,interfaceType,isInner,parentContext);
	  innerClass.addImplementingInterface(interfaceType.getAsStatement());
	  outerClass.addImplementingInterface(interfaceType.getAsStatement());
	}
	innerClass.setupContext();
	outerClass.setupContext();
	declaration : element : variable_declaration {
	  if isInner || element->inner != null {
	    Variable newVariable = variable.declaration(element,isInner,parentContext);
	    if newVariable.isFinal() && element->isFinal == null {
	      newVariable.setIsFinal(false);
	    }
	    innerClass.addVariable(newVariable);
	  }
	  else {
	    outerClass.addVariable(variable.declaration(element,isInner,parentContext));
	  }
	}
	declaration : element : method_declaration {
	  if isInner || element->inner != null {
	    innerClass.addMethod(method.declaration(element,isInner,parentContext));
	  }
	  else {
	    outerClass.addMethod(method.declaration(element,isInner,parentContext));
	  }
	}
	declaration : element : class_declaration {
	  Class subInnerClass = new Class ();
	  Class subOuterClass = new Class ();
	  classGenerator.declaration(element,subInnerClass,subOuterClass,isInner,parentContext);
	  
	  if element->inner == null {
	    subInnerClass.addVariable(@'subOuterClass.getName()' _ = new 'subOuterClass.getName()'(););
	    subInnerClass.addInitMethodFromClass(subOuterClass);
	    subInnerClass.setParentClass(new ExternalStatement.TypeName("ExternalClassEntry"));
		subInnerClass.removeInterfaces();
		
	    outerClass.addSubClass(subOuterClass);
      }
	  innerClass.addSubClass(subInnerClass);
	}
	if 'declaration->objectType'.startsWith("interface"){
	  if isInner {
	    innerClass.setIsInterface(true);
	  }
	  else {
	    outerClass.setIsInterface(true);
	  }
	}
	else if 'declaration->objectType'.startsWith("enum"){
	  if isInner {
	    innerClass.setIsEnum(true);
	  }
	  else {
	    outerClass.setIsEnum(true);
	  }
	}
	if declaration->weak != null {
	  if isInner {
	    innerClass.setIsAbstract(true);
	  }
	  else {
	    outerClass.setIsAbstract(true);
	  }
	}
	
	if isInner  == false {
	  outerClass.setIsStatic(declaration->static  != null);
	  innerClass.setIsStatic(true);
	}
  }
> void collectClassNames(%T classToken){    
	if classToken->className->NAME != null && classToken->inner == null {
	  addDefinedClassName(ExternalFlow.camelize('classToken->className->NAME'));
	}
	classToken : element : class_declaration {
	  collectClassNames(element);
	}
  }
}