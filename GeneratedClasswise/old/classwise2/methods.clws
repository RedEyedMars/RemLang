
> MethodGenerator method = new MethodGenerator();
> class MethodGenerator {
  Set<String> definedMethodNames = new HashSet<String>();
 void addDefinedMethodName(Method newMethod){
    definedMethodNames.add(newMethod.getName());
  }
  Method declaration(%T declaration,Boolean isInner, Context parentContext){
	return definition(declaration,isInner, parentContext);
  }

  Method definition(%T input, Boolean mustInner, Context parentContext){
	Boolean isInner = mustInner || input->inner != null ;
	Method newMethod = new Method ();
	
	Type methodType = new Type();
	input : element : all_type_name {
	  classwise.all_type(element,methodType,isInner,parentContext);
	}
	input : element : ARRAY_TYPE {
      methodType.addArraySymbol();
	}
	
	newMethod.setType(methodType.getAsStatement());
	Body methodBody = new Body ();
	methodBody.setParentContext(parentContext);
	Context context = methodBody.getContext();
	if input->inline != null && input->inline->method_parameters != null {
	  List<Variable > parameters = new ArrayList<Variable >();
	  input->inline->method_parameters : element : parameter {
	    parameters.add(variable.declaration(element,isInner,parentContext));
	  }
	  newMethod.setParameters(parameters);
	}
	else if input->variableParameters != null {
	  newMethod.setParametersAsStatement(body.statement(input->variableParameters->statement_as_method->body_statement,true,parentContext));
	}
	else {
	  newMethod.setParameters(new ArrayList<Variable >());
	}
	#if input->"throwException" != null {
	  StringBuilder exceptionBuilder = new StringBuilder();
	  ~String comma = "";
	  for %T element: input.getAllSafely("throwException"){
	    exceptionBuilder.append(comma);
	    exceptionBuilder.append('element');
	    exceptionBuilder.append("Exception");
	    comma = ",";
	  }
	  newMethod.setThrowsStatement(exceptionBuilder.toString());
	}#
	if input->body != null {
	  input->body : element : body_element {
	    methodBody.add(body.element(element,isInner,context));
	  }
	}
	if input->methodName == null {
	  newMethod.setName(|"*"|);
	}
	else if input->methodName->NAME != null {
	  newMethod.setName(|'input->methodName->NAME'|);
	}
	else {
	  NameVar nameVar = new NameVar();
	  classwise.name_var(input->methodName->name_var,nameVar,isInner,parentContext);
	  newMethod.setName(nameVar.getAsStatement());
	}
	newMethod.setBody(methodBody);
	if input->static != null {
	  newMethod.setIsStatic(true);
	}
	if input->weak != null {
	  newMethod.setIsAbstract(true);
	}
	return newMethod;
  }
}