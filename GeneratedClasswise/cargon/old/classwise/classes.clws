< Token  : \com.\rem.\gen.\parser;
> ClassGenerator classGenerator = new ClassGenerator();
> class ClassGenerator // {
> Set<String> definedClassNames = new HashSet<String>();
> void addDefinedClassName(String className){
	definedClassNames.add(className);
  }
> Boolean hasDefinedClassName(String className){
    return definedClassNames.contains(className);
  }
> Integer classIndex = 0;
>~Integer addVariableIndex = 0;
>~Integer addMethodIndex = 0;
>~Integer addSubClassIndex = 0;

> void declaration(Token declaration,Class innerClass, Class outerClass, Boolean mustInner, Context parentContext){
	Boolean isInner = declaration->"inner" != null || mustInner;
	Statement classPackageName = new Statement();
	classPackageName.set(".");
	
	if declaration->"className"->"NAME" != null {
	  innerClass.setNameAsStatement(new Statement (new StringEntry("\""\+'declaration->"className"'\+"\"")));
	  innerClass.setName('declaration->"className"');
	  outerClass.setNameAsStatement(new Statement (new StringEntry("\""\+'declaration->"className"'\+"\"")));
	  outerClass.setName('declaration->"className"');
	}
	else {
	  innerClass.setNameAsStatement(new Statement (new StringEntry("\"+"\+'declaration->"className"'\+"+\"")));
	  innerClass.setNameAsStatement(|'declaration->"className"'|);
	  innerClass.setName('declaration->"className"');
	  outerClass.setNameAsStatement(new Statement (new StringEntry("\"+"\+'declaration->"className"'\+"+\"")));
	  outerClass.setNameAsStatement(|'declaration->"className"'|);
	  outerClass.setName('declaration->"className"');
	}
	
	for Token element: declaration.getAllSafely("packageName") {
	  if element->"NAME" != null {
	    classPackageName.add(|'element->"NAME"'|);
	  }
	  else if element->"quote" != null {
	    classPackageName.add(|'element->"quote"'|);
	  }
	  else if element->"statement_as_string" != null {
	    classPackageName.add(body.statement(element->"statement_as_string"->"body_statement",true,parentContext));
	  }
	}
	for Token element: declaration.getAllSafely("templateTypeName") {
	  innerClass.addTemplateType(|'element'|);
	  outerClass.addTemplateType(|'element'|);
	}
	innerClass.setPackageName(classPackageName);
	outerClass.setPackageName(classPackageName);
	for Token element: declaration.getAllSafely("parentName") {
	  Type parentType = new Type ();
	  classwise.type_var(element->"type_var",parentType,isInner,parentContext);
	  innerClass.setParentClass(parentType.getAsStatement());
	  outerClass.setParentClass(parentType.getAsStatement());
	}
	for Token element: declaration.getAllSafely("interfaceName") {
	  Type interfaceType = new Type ();
	  classwise.type_var(element->"type_var",interfaceType,isInner,parentContext);
	  innerClass.addImplementingInterface(interfaceType.getAsStatement());
	  outerClass.addImplementingInterface(interfaceType.getAsStatement());
	}
	innerClass.setupContext();
	outerClass.setupContext();
	for Token element: declaration.getAllSafely("variable_declaration") {
	  if isInner || element->"inner" != null {
	    Variable newVariable = variable.declaration(element,isInner,parentContext);
	    if newVariable.isFinal() && element->"IS_FINAL" == null {
	      newVariable.setIsFinal(false);
	    }
	    innerClass.addVariable(newVariable);
	  }
	  else {
	    outerClass.addVariable(variable.declaration(element,isInner,parentContext));
	  }
	}
	for Token element: declaration.getAllSafely("method_declaration") {
	  if isInner || element->"inner" != null {
	    innerClass.addMethod(method.declaration(element,isInner,parentContext));
	  }
	  else {
	    outerClass.addMethod(method.declaration(element,isInner,parentContext));
	  }
	}
	for Token element: declaration.getAllSafely("class_declaration") {
	  Class subInnerClass = new Class ();
	  Class subOuterClass = new Class ();
	  classGenerator.declaration(element,subInnerClass,subOuterClass,isInner,parentContext);
	  
	  if element->"inner" == null {
	    subInnerClass.addVariable(@'subOuterClass.getName()' "_" = "new "+'subOuterClass.getName()'+"()";);
	    subInnerClass.addInitMethodFromClass(subOuterClass);
	    subInnerClass.setParentClass(new ExternalStatement.TypeName("ExternalClassEntry"));
		subInnerClass.removeInterfaces();
		
	    outerClass.addSubClass(subOuterClass);
      }
	  innerClass.addSubClass(subInnerClass);
	}
	if 'declaration->"objectType"'.contains("interface"){
	  if isInner {
	    innerClass.setIsInterface(true);
	  }
	  else {
	    outerClass.setIsInterface(true);
	  }
	}
	else if 'declaration->"objectType"'.contains("enum"){
	  if isInner {
	    innerClass.setIsEnum(true);
	  }
	  else {
	    outerClass.setIsEnum(true);
	  }
	}
	if declaration->"abstrac" != null {
	  if isInner {
	    innerClass.setIsAbstract(true);
	  }
	  else {
	    outerClass.setIsAbstract(true);
	  }
	}
	
	if isInner  == false {
	  outerClass.setIsStatic(declaration->"weak"  == null);
	  innerClass.setIsStatic(true);
	}
  }
> void collectClassNames(Token classToken){    
	if classToken->"className"->"NAME" != null && classToken->"inner" == null {
	  \addDefinedClassName(^classToken->"className"->"NAME");
	}
    for Token element: classToken.getAllSafely("class_declaration") {
	  \collectClassNames(element);
	}
  }
}